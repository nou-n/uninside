// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: checkin.proto
// </auto-generated>
#pragma warning disable
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
namespace Google.Protobuf.checkin
{

    /// <summary>Holder for reflection information generated from checkin.proto</summary>
    public static partial class CheckinReflection
    {

        #region Descriptor
        /// <summary>File descriptor for checkin.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static CheckinReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Cg1jaGVja2luLnByb3RvEgdjaGVja2luIrkMCg5DaGVja2luUmVxdWVzdBIM",
                  "CgRpbWVpGAEgASgJEhEKCWFuZHJvaWRJZBgCIAEoAxIOCgZkaWdlc3QYAyAB",
                  "KAkSMAoHY2hlY2tpbhgEIAIoCzIfLmNoZWNraW4uQ2hlY2tpblJlcXVlc3Qu",
                  "Q2hlY2tpbhIUCgxkZXNpcmVkQnVpbGQYBSABKAkSDgoGbG9jYWxlGAYgASgJ",
                  "EhEKCWxvZ2dpbmdJZBgHIAEoAxIVCg1tYXJrZXRDaGVja2luGAggASgJEhIK",
                  "Cm1hY0FkZHJlc3MYCSADKAkSDAoEbWVpZBgKIAEoCRIVCg1hY2NvdW50Q29v",
                  "a2llGAsgAygJEhAKCHRpbWVab25lGAwgASgJEhUKDXNlY3VyaXR5VG9rZW4Y",
                  "DSABKAYSDwoHdmVyc2lvbhgOIAEoBRIPCgdvdGFDZXJ0GA8gAygJEg4KBnNl",
                  "cmlhbBgQIAEoCRILCgNlc24YESABKAkSQQoTZGV2aWNlQ29uZmlndXJhdGlv",
                  "bhgSIAEoCzIkLmNoZWNraW4uQ2hlY2tpblJlcXVlc3QuRGV2aWNlQ29uZmln",
                  "EhYKDm1hY0FkZHJlc3NUeXBlGBMgAygJEhAKCGZyYWdtZW50GBQgAigFEhAK",
                  "CHVzZXJOYW1lGBUgASgJEhgKEHVzZXJTZXJpYWxOdW1iZXIYFiABKAUapwUK",
                  "B0NoZWNraW4SNAoFYnVpbGQYASACKAsyJS5jaGVja2luLkNoZWNraW5SZXF1",
                  "ZXN0LkNoZWNraW4uQnVpbGQSFQoNbGFzdENoZWNraW5NcxgCIAEoAxI0CgVl",
                  "dmVudBgDIAMoCzIlLmNoZWNraW4uQ2hlY2tpblJlcXVlc3QuQ2hlY2tpbi5F",
                  "dmVudBI3CgRzdGF0GAQgAygLMikuY2hlY2tpbi5DaGVja2luUmVxdWVzdC5D",
                  "aGVja2luLlN0YXRpc3RpYxIWCg5yZXF1ZXN0ZWRHcm91cBgFIAMoCRIUCgxj",
                  "ZWxsT3BlcmF0b3IYBiABKAkSEwoLc2ltT3BlcmF0b3IYByABKAkSDwoHcm9h",
                  "bWluZxgIIAEoCRISCgp1c2VyTnVtYmVyGAkgASgFGowCCgVCdWlsZBITCgtm",
                  "aW5nZXJwcmludBgBIAEoCRIQCghoYXJkd2FyZRgCIAEoCRINCgVicmFuZBgD",
                  "IAEoCRINCgVyYWRpbxgEIAEoCRISCgpib290bG9hZGVyGAUgASgJEhAKCGNs",
                  "aWVudElkGAYgASgJEgwKBHRpbWUYByABKAMSGgoScGFja2FnZVZlcnNpb25D",
                  "b2RlGAggASgFEg4KBmRldmljZRgJIAEoCRISCgpzZGtWZXJzaW9uGAogASgF",
                  "Eg0KBW1vZGVsGAsgASgJEhQKDG1hbnVmYWN0dXJlchgMIAEoCRIPCgdwcm9k",
                  "dWN0GA0gASgJEhQKDG90YUluc3RhbGxlZBgOIAEoCBozCgVFdmVudBILCgN0",
                  "YWcYASABKAkSDQoFdmFsdWUYAiABKAkSDgoGdGltZU1zGAMgASgDGjQKCVN0",
                  "YXRpc3RpYxILCgN0YWcYASACKAkSDQoFY291bnQYAiABKAUSCwoDc3VtGAMg",
                  "ASgCGo8DCgxEZXZpY2VDb25maWcSEwoLdG91Y2hTY3JlZW4YASABKAUSFAoM",
                  "a2V5Ym9hcmRUeXBlGAIgASgFEhIKCm5hdmlnYXRpb24YAyABKAUSFAoMc2Ny",
                  "ZWVuTGF5b3V0GAQgASgFEhcKD2hhc0hhcmRLZXlib2FyZBgFIAEoCBIcChRo",
                  "YXNGaXZlV2F5TmF2aWdhdGlvbhgGIAEoCBISCgpkZW5zaXR5RHBpGAcgASgF",
                  "EhMKC2dsRXNWZXJzaW9uGAggASgFEhUKDXNoYXJlZExpYnJhcnkYCSADKAkS",
                  "GAoQYXZhaWxhYmxlRmVhdHVyZRgKIAMoCRIWCg5uYXRpdmVQbGF0Zm9ybRgL",
                  "IAMoCRITCgt3aWR0aFBpeGVscxgMIAEoBRIUCgxoZWlnaHRQaXhlbHMYDSAB",
                  "KAUSDgoGbG9jYWxlGA4gAygJEhMKC2dsRXh0ZW5zaW9uGA8gAygJEhMKC2Rl",
                  "dmljZUNsYXNzGBAgASgFEhwKFG1heEFwa0Rvd25sb2FkU2l6ZU1iGBEgASgF",
                  "IqoECg9DaGVja2luUmVzcG9uc2USDwoHc3RhdHNPaxgBIAEoCBIvCgZpbnRl",
                  "bnQYAiADKAsyHy5jaGVja2luLkNoZWNraW5SZXNwb25zZS5JbnRlbnQSDgoG",
                  "dGltZU1zGAMgASgDEg4KBmRpZ2VzdBgEIAEoCRI6CgdzZXR0aW5nGAUgAygL",
                  "MikuY2hlY2tpbi5DaGVja2luUmVzcG9uc2UuR3NlcnZpY2VzU2V0dGluZxIQ",
                  "CghtYXJrZXRPaxgGIAEoCBIRCglhbmRyb2lkSWQYByABKAYSFQoNc2VjdXJp",
                  "dHlUb2tlbhgIIAEoBhIUCgxzZXR0aW5nc0RpZmYYCSABKAgSFQoNZGVsZXRl",
                  "U2V0dGluZxgKIAMoCRITCgt2ZXJzaW9uSW5mbxgLIAEoCRIdChVkZXZpY2VE",
                  "YXRhVmVyc2lvbkluZm8YDCABKAkaqgEKBkludGVudBIOCgZhY3Rpb24YASAB",
                  "KAkSDwoHZGF0YVVyaRgCIAEoCRIQCghtaW1lVHlwZRgDIAEoCRIRCglqYXZh",
                  "Q2xhc3MYBCABKAkSNAoFZXh0cmEYBSADKAsyJS5jaGVja2luLkNoZWNraW5S",
                  "ZXNwb25zZS5JbnRlbnQuRXh0cmEaJAoFRXh0cmESDAoEbmFtZRgGIAEoCRIN",
                  "CgV2YWx1ZRgHIAEoCRovChBHc2VydmljZXNTZXR0aW5nEgwKBG5hbWUYASAB",
                  "KAwSDQoFdmFsdWUYAiABKAxCGqoCF0dvb2dsZS5Qcm90b2J1Zi5jaGVja2lu"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinRequest), global::Google.Protobuf.checkin.CheckinRequest.Parser, new[]{ "Imei", "AndroidId", "Digest", "Checkin", "DesiredBuild", "Locale", "LoggingId", "MarketCheckin", "MacAddress", "Meid", "AccountCookie", "TimeZone", "SecurityToken", "Version", "OtaCert", "Serial", "Esn", "DeviceConfiguration", "MacAddressType", "Fragment", "UserName", "UserSerialNumber" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin), global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Parser, new[]{ "Build", "LastCheckinMs", "Event", "Stat", "RequestedGroup", "CellOperator", "SimOperator", "Roaming", "UserNumber" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Build), global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Build.Parser, new[]{ "Fingerprint", "Hardware", "Brand", "Radio", "Bootloader", "ClientId", "Time", "PackageVersionCode", "Device", "SdkVersion", "Model", "Manufacturer", "Product", "OtaInstalled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Event), global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Event.Parser, new[]{ "Tag", "Value", "TimeMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Statistic), global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Statistic.Parser, new[]{ "Tag", "Count", "Sum" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinRequest.Types.DeviceConfig), global::Google.Protobuf.checkin.CheckinRequest.Types.DeviceConfig.Parser, new[]{ "TouchScreen", "KeyboardType", "Navigation", "ScreenLayout", "HasHardKeyboard", "HasFiveWayNavigation", "DensityDpi", "GlEsVersion", "SharedLibrary", "AvailableFeature", "NativePlatform", "WidthPixels", "HeightPixels", "Locale", "GlExtension", "DeviceClass", "MaxApkDownloadSizeMb" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinResponse), global::Google.Protobuf.checkin.CheckinResponse.Parser, new[]{ "StatsOk", "Intent", "TimeMs", "Digest", "Setting", "MarketOk", "AndroidId", "SecurityToken", "SettingsDiff", "DeleteSetting", "VersionInfo", "DeviceDataVersionInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinResponse.Types.Intent), global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Parser, new[]{ "Action", "DataUri", "MimeType", "JavaClass", "Extra" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Types.Extra), global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Types.Extra.Parser, new[]{ "Name", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.checkin.CheckinResponse.Types.GservicesSetting), global::Google.Protobuf.checkin.CheckinResponse.Types.GservicesSetting.Parser, new[]{ "Name", "Value" }, null, null, null, null)})
                }));
        }
        #endregion

    }
    #region Messages
    /// <summary>
    /// Sample data, if provided, is fished from a Nexus 7 (2013) / flo running Android 5.0
    /// </summary>
    public sealed partial class CheckinRequest : pb::IMessage<CheckinRequest>
    {
        private static readonly pb::MessageParser<CheckinRequest> _parser = new pb::MessageParser<CheckinRequest>(() => new CheckinRequest());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CheckinRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Protobuf.checkin.CheckinReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckinRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckinRequest(CheckinRequest other) : this()
        {
            _hasBits0 = other._hasBits0;
            imei_ = other.imei_;
            androidId_ = other.androidId_;
            digest_ = other.digest_;
            checkin_ = other.checkin_ != null ? other.checkin_.Clone() : null;
            desiredBuild_ = other.desiredBuild_;
            locale_ = other.locale_;
            loggingId_ = other.loggingId_;
            marketCheckin_ = other.marketCheckin_;
            macAddress_ = other.macAddress_.Clone();
            meid_ = other.meid_;
            accountCookie_ = other.accountCookie_.Clone();
            timeZone_ = other.timeZone_;
            securityToken_ = other.securityToken_;
            version_ = other.version_;
            otaCert_ = other.otaCert_.Clone();
            serial_ = other.serial_;
            esn_ = other.esn_;
            deviceConfiguration_ = other.deviceConfiguration_ != null ? other.deviceConfiguration_.Clone() : null;
            macAddressType_ = other.macAddressType_.Clone();
            fragment_ = other.fragment_;
            userName_ = other.userName_;
            userSerialNumber_ = other.userSerialNumber_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckinRequest Clone()
        {
            return new CheckinRequest(this);
        }

        /// <summary>Field number for the "imei" field.</summary>
        public const int ImeiFieldNumber = 1;
        private readonly static string ImeiDefaultValue = "";

        private string imei_;
        /// <summary>
        /// unused
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Imei
        {
            get { return imei_ ?? ImeiDefaultValue; }
            set
            {
                imei_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "imei" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasImei
        {
            get { return imei_ != null; }
        }
        /// <summary>Clears the value of the "imei" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearImei()
        {
            imei_ = null;
        }

        /// <summary>Field number for the "androidId" field.</summary>
        public const int AndroidIdFieldNumber = 2;
        private readonly static long AndroidIdDefaultValue = 0L;

        private long androidId_;
        /// <summary>
        /// Gservices["android_id"] or 0 on first-checkin
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long AndroidId
        {
            get { if ((_hasBits0 & 1) != 0) { return androidId_; } else { return AndroidIdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                androidId_ = value;
            }
        }
        /// <summary>Gets whether the "androidId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAndroidId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "androidId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAndroidId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "digest" field.</summary>
        public const int DigestFieldNumber = 3;
        private readonly static string DigestDefaultValue = "";

        private string digest_;
        /// <summary>
        /// Gservices["digest"] or ""
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Digest
        {
            get { return digest_ ?? DigestDefaultValue; }
            set
            {
                digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "digest" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDigest
        {
            get { return digest_ != null; }
        }
        /// <summary>Clears the value of the "digest" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDigest()
        {
            digest_ = null;
        }

        /// <summary>Field number for the "checkin" field.</summary>
        public const int CheckinFieldNumber = 4;
        private global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin checkin_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin Checkin
        {
            get { return checkin_; }
            set
            {
                checkin_ = value;
            }
        }

        /// <summary>Field number for the "desiredBuild" field.</summary>
        public const int DesiredBuildFieldNumber = 5;
        private readonly static string DesiredBuildDefaultValue = "";

        private string desiredBuild_;
        /// <summary>
        /// unused
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DesiredBuild
        {
            get { return desiredBuild_ ?? DesiredBuildDefaultValue; }
            set
            {
                desiredBuild_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "desiredBuild" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDesiredBuild
        {
            get { return desiredBuild_ != null; }
        }
        /// <summary>Clears the value of the "desiredBuild" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDesiredBuild()
        {
            desiredBuild_ = null;
        }

        /// <summary>Field number for the "locale" field.</summary>
        public const int LocaleFieldNumber = 6;
        private readonly static string LocaleDefaultValue = "";

        private string locale_;
        /// <summary>
        /// Locale.toString
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Locale
        {
            get { return locale_ ?? LocaleDefaultValue; }
            set
            {
                locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "locale" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLocale
        {
            get { return locale_ != null; }
        }
        /// <summary>Clears the value of the "locale" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLocale()
        {
            locale_ = null;
        }

        /// <summary>Field number for the "loggingId" field.</summary>
        public const int LoggingIdFieldNumber = 7;
        private readonly static long LoggingIdDefaultValue = 0L;

        private long loggingId_;
        /// <summary>
        /// GoogleSettingsContract.Partner["logging_id2"] (choosen randomly on first checkin)
        /// eg. 12561488293572742346
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LoggingId
        {
            get { if ((_hasBits0 & 2) != 0) { return loggingId_; } else { return LoggingIdDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                loggingId_ = value;
            }
        }
        /// <summary>Gets whether the "loggingId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLoggingId
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "loggingId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLoggingId()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "marketCheckin" field.</summary>
        public const int MarketCheckinFieldNumber = 8;
        private readonly static string MarketCheckinDefaultValue = "";

        private string marketCheckin_;
        /// <summary>
        /// unused
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MarketCheckin
        {
            get { return marketCheckin_ ?? MarketCheckinDefaultValue; }
            set
            {
                marketCheckin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "marketCheckin" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMarketCheckin
        {
            get { return marketCheckin_ != null; }
        }
        /// <summary>Clears the value of the "marketCheckin" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMarketCheckin()
        {
            marketCheckin_ = null;
        }

        /// <summary>Field number for the "macAddress" field.</summary>
        public const int MacAddressFieldNumber = 9;
        private static readonly pb::FieldCodec<string> _repeated_macAddress_codec
            = pb::FieldCodec.ForString(74);
        private readonly pbc::RepeatedField<string> macAddress_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// NetworkInfo.getExtraInfo, WifiInfo.getMacAddress (12 hex-digits)
        /// eg. d850e6abcdef
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> MacAddress
        {
            get { return macAddress_; }
        }

        /// <summary>Field number for the "meid" field.</summary>
        public const int MeidFieldNumber = 10;
        private readonly static string MeidDefaultValue = "";

        private string meid_;
        /// <summary>
        /// TelephonyManager.getDeviceId (14 hex-digits), not set on tablets
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Meid
        {
            get { return meid_ ?? MeidDefaultValue; }
            set
            {
                meid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "meid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMeid
        {
            get { return meid_ != null; }
        }
        /// <summary>Clears the value of the "meid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMeid()
        {
            meid_ = null;
        }

        /// <summary>Field number for the "accountCookie" field.</summary>
        public const int AccountCookieFieldNumber = 11;
        private static readonly pb::FieldCodec<string> _repeated_accountCookie_codec
            = pb::FieldCodec.ForString(90);
        private readonly pbc::RepeatedField<string> accountCookie_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// "[&lt;email>]" followed by "&lt;authToken>", empty string on first checkin
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> AccountCookie
        {
            get { return accountCookie_; }
        }

        /// <summary>Field number for the "timeZone" field.</summary>
        public const int TimeZoneFieldNumber = 12;
        private readonly static string TimeZoneDefaultValue = "";

        private string timeZone_;
        /// <summary>
        /// TimeZone.getId
        /// eg. GMT
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TimeZone
        {
            get { return timeZone_ ?? TimeZoneDefaultValue; }
            set
            {
                timeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "timeZone" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimeZone
        {
            get { return timeZone_ != null; }
        }
        /// <summary>Clears the value of the "timeZone" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimeZone()
        {
            timeZone_ = null;
        }

        /// <summary>Field number for the "securityToken" field.</summary>
        public const int SecurityTokenFieldNumber = 13;
        private readonly static ulong SecurityTokenDefaultValue = 0UL;

        private ulong securityToken_;
        /// <summary>
        /// security token as given on first checkin, not set on first checkin
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SecurityToken
        {
            get { if ((_hasBits0 & 4) != 0) { return securityToken_; } else { return SecurityTokenDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                securityToken_ = value;
            }
        }
        /// <summary>Gets whether the "securityToken" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSecurityToken
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "securityToken" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSecurityToken()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 14;
        private readonly static int VersionDefaultValue = 0;

        private int version_;
        /// <summary>
        /// use 3
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Version
        {
            get { if ((_hasBits0 & 8) != 0) { return version_; } else { return VersionDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                version_ = value;
            }
        }
        /// <summary>Gets whether the "version" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVersion
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "version" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVersion()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "otaCert" field.</summary>
        public const int OtaCertFieldNumber = 15;
        private static readonly pb::FieldCodec<string> _repeated_otaCert_codec
            = pb::FieldCodec.ForString(122);
        private readonly pbc::RepeatedField<string> otaCert_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// SHA-1 of each in /system/etc/security/otacerts.zip or "--IOException--" or "--no-output--"
        /// eg. dKXTm1QH9QShGQwBM/4rg6/lCNQ=
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> OtaCert
        {
            get { return otaCert_; }
        }

        /// <summary>Field number for the "serial" field.</summary>
        public const int SerialFieldNumber = 16;
        private readonly static string SerialDefaultValue = "";

        private string serial_;
        /// <summary>
        /// Build.SERIAL != "unknown"
        /// eg. 07d90b18
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Serial
        {
            get { return serial_ ?? SerialDefaultValue; }
            set
            {
                serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "serial" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSerial
        {
            get { return serial_ != null; }
        }
        /// <summary>Clears the value of the "serial" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSerial()
        {
            serial_ = null;
        }

        /// <summary>Field number for the "esn" field.</summary>
        public const int EsnFieldNumber = 17;
        private readonly static string EsnDefaultValue = "";

        private string esn_;
        /// <summary>
        /// TelephonyManager.getDeviceId (8 hex-digits), not set on tablets
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Esn
        {
            get { return esn_ ?? EsnDefaultValue; }
            set
            {
                esn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "esn" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEsn
        {
            get { return esn_ != null; }
        }
        /// <summary>Clears the value of the "esn" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEsn()
        {
            esn_ = null;
        }

        /// <summary>Field number for the "deviceConfiguration" field.</summary>
        public const int DeviceConfigurationFieldNumber = 18;
        private global::Google.Protobuf.checkin.CheckinRequest.Types.DeviceConfig deviceConfiguration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.checkin.CheckinRequest.Types.DeviceConfig DeviceConfiguration
        {
            get { return deviceConfiguration_; }
            set
            {
                deviceConfiguration_ = value;
            }
        }

        /// <summary>Field number for the "macAddressType" field.</summary>
        public const int MacAddressTypeFieldNumber = 19;
        private static readonly pb::FieldCodec<string> _repeated_macAddressType_codec
            = pb::FieldCodec.ForString(154);
        private readonly pbc::RepeatedField<string> macAddressType_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// "ethernet" or "wifi"
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> MacAddressType
        {
            get { return macAddressType_; }
        }

        /// <summary>Field number for the "fragment" field.</summary>
        public const int FragmentFieldNumber = 20;
        private readonly static int FragmentDefaultValue = 0;

        private int fragment_;
        /// <summary>
        /// unknown, use 0 on pre- and first-checkin, and 1 for later checkins
        /// also present on pre-checkin
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Fragment
        {
            get { if ((_hasBits0 & 16) != 0) { return fragment_; } else { return FragmentDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                fragment_ = value;
            }
        }
        /// <summary>Gets whether the "fragment" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFragment
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "fragment" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFragment()
        {
            _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "userName" field.</summary>
        public const int UserNameFieldNumber = 21;
        private readonly static string UserNameDefaultValue = "";

        private string userName_;
        /// <summary>
        /// unknown
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UserName
        {
            get { return userName_ ?? UserNameDefaultValue; }
            set
            {
                userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "userName" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUserName
        {
            get { return userName_ != null; }
        }
        /// <summary>Clears the value of the "userName" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUserName()
        {
            userName_ = null;
        }

        /// <summary>Field number for the "userSerialNumber" field.</summary>
        public const int UserSerialNumberFieldNumber = 22;
        private readonly static int UserSerialNumberDefaultValue = 0;

        private int userSerialNumber_;
        /// <summary>
        /// UserManager.getUserSerialNumber
        /// eg. 0
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int UserSerialNumber
        {
            get { if ((_hasBits0 & 32) != 0) { return userSerialNumber_; } else { return UserSerialNumberDefaultValue; } }
            set
            {
                _hasBits0 |= 32;
                userSerialNumber_ = value;
            }
        }
        /// <summary>Gets whether the "userSerialNumber" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUserSerialNumber
        {
            get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "userSerialNumber" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUserSerialNumber()
        {
            _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CheckinRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CheckinRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Imei != other.Imei) return false;
            if (AndroidId != other.AndroidId) return false;
            if (Digest != other.Digest) return false;
            if (!object.Equals(Checkin, other.Checkin)) return false;
            if (DesiredBuild != other.DesiredBuild) return false;
            if (Locale != other.Locale) return false;
            if (LoggingId != other.LoggingId) return false;
            if (MarketCheckin != other.MarketCheckin) return false;
            if (!macAddress_.Equals(other.macAddress_)) return false;
            if (Meid != other.Meid) return false;
            if (!accountCookie_.Equals(other.accountCookie_)) return false;
            if (TimeZone != other.TimeZone) return false;
            if (SecurityToken != other.SecurityToken) return false;
            if (Version != other.Version) return false;
            if (!otaCert_.Equals(other.otaCert_)) return false;
            if (Serial != other.Serial) return false;
            if (Esn != other.Esn) return false;
            if (!object.Equals(DeviceConfiguration, other.DeviceConfiguration)) return false;
            if (!macAddressType_.Equals(other.macAddressType_)) return false;
            if (Fragment != other.Fragment) return false;
            if (UserName != other.UserName) return false;
            if (UserSerialNumber != other.UserSerialNumber) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasImei) hash ^= Imei.GetHashCode();
            if (HasAndroidId) hash ^= AndroidId.GetHashCode();
            if (HasDigest) hash ^= Digest.GetHashCode();
            if (checkin_ != null) hash ^= Checkin.GetHashCode();
            if (HasDesiredBuild) hash ^= DesiredBuild.GetHashCode();
            if (HasLocale) hash ^= Locale.GetHashCode();
            if (HasLoggingId) hash ^= LoggingId.GetHashCode();
            if (HasMarketCheckin) hash ^= MarketCheckin.GetHashCode();
            hash ^= macAddress_.GetHashCode();
            if (HasMeid) hash ^= Meid.GetHashCode();
            hash ^= accountCookie_.GetHashCode();
            if (HasTimeZone) hash ^= TimeZone.GetHashCode();
            if (HasSecurityToken) hash ^= SecurityToken.GetHashCode();
            if (HasVersion) hash ^= Version.GetHashCode();
            hash ^= otaCert_.GetHashCode();
            if (HasSerial) hash ^= Serial.GetHashCode();
            if (HasEsn) hash ^= Esn.GetHashCode();
            if (deviceConfiguration_ != null) hash ^= DeviceConfiguration.GetHashCode();
            hash ^= macAddressType_.GetHashCode();
            if (HasFragment) hash ^= Fragment.GetHashCode();
            if (HasUserName) hash ^= UserName.GetHashCode();
            if (HasUserSerialNumber) hash ^= UserSerialNumber.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasImei)
            {
                output.WriteRawTag(10);
                output.WriteString(Imei);
            }
            if (HasAndroidId)
            {
                output.WriteRawTag(16);
                output.WriteInt64(AndroidId);
            }
            if (HasDigest)
            {
                output.WriteRawTag(26);
                output.WriteString(Digest);
            }
            if (checkin_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Checkin);
            }
            if (HasDesiredBuild)
            {
                output.WriteRawTag(42);
                output.WriteString(DesiredBuild);
            }
            if (HasLocale)
            {
                output.WriteRawTag(50);
                output.WriteString(Locale);
            }
            if (HasLoggingId)
            {
                output.WriteRawTag(56);
                output.WriteInt64(LoggingId);
            }
            if (HasMarketCheckin)
            {
                output.WriteRawTag(66);
                output.WriteString(MarketCheckin);
            }
            macAddress_.WriteTo(output, _repeated_macAddress_codec);
            if (HasMeid)
            {
                output.WriteRawTag(82);
                output.WriteString(Meid);
            }
            accountCookie_.WriteTo(output, _repeated_accountCookie_codec);
            if (HasTimeZone)
            {
                output.WriteRawTag(98);
                output.WriteString(TimeZone);
            }
            if (HasSecurityToken)
            {
                output.WriteRawTag(105);
                output.WriteFixed64(SecurityToken);
            }
            if (HasVersion)
            {
                output.WriteRawTag(112);
                output.WriteInt32(Version);
            }
            otaCert_.WriteTo(output, _repeated_otaCert_codec);
            if (HasSerial)
            {
                output.WriteRawTag(130, 1);
                output.WriteString(Serial);
            }
            if (HasEsn)
            {
                output.WriteRawTag(138, 1);
                output.WriteString(Esn);
            }
            if (deviceConfiguration_ != null)
            {
                output.WriteRawTag(146, 1);
                output.WriteMessage(DeviceConfiguration);
            }
            macAddressType_.WriteTo(output, _repeated_macAddressType_codec);
            if (HasFragment)
            {
                output.WriteRawTag(160, 1);
                output.WriteInt32(Fragment);
            }
            if (HasUserName)
            {
                output.WriteRawTag(170, 1);
                output.WriteString(UserName);
            }
            if (HasUserSerialNumber)
            {
                output.WriteRawTag(176, 1);
                output.WriteInt32(UserSerialNumber);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasImei)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Imei);
            }
            if (HasAndroidId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(AndroidId);
            }
            if (HasDigest)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Digest);
            }
            if (checkin_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Checkin);
            }
            if (HasDesiredBuild)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DesiredBuild);
            }
            if (HasLocale)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
            }
            if (HasLoggingId)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoggingId);
            }
            if (HasMarketCheckin)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MarketCheckin);
            }
            size += macAddress_.CalculateSize(_repeated_macAddress_codec);
            if (HasMeid)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Meid);
            }
            size += accountCookie_.CalculateSize(_repeated_accountCookie_codec);
            if (HasTimeZone)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeZone);
            }
            if (HasSecurityToken)
            {
                size += 1 + 8;
            }
            if (HasVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
            }
            size += otaCert_.CalculateSize(_repeated_otaCert_codec);
            if (HasSerial)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Serial);
            }
            if (HasEsn)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Esn);
            }
            if (deviceConfiguration_ != null)
            {
                size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeviceConfiguration);
            }
            size += macAddressType_.CalculateSize(_repeated_macAddressType_codec);
            if (HasFragment)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Fragment);
            }
            if (HasUserName)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
            }
            if (HasUserSerialNumber)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserSerialNumber);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CheckinRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasImei)
            {
                Imei = other.Imei;
            }
            if (other.HasAndroidId)
            {
                AndroidId = other.AndroidId;
            }
            if (other.HasDigest)
            {
                Digest = other.Digest;
            }
            if (other.checkin_ != null)
            {
                if (checkin_ == null)
                {
                    Checkin = new global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin();
                }
                Checkin.MergeFrom(other.Checkin);
            }
            if (other.HasDesiredBuild)
            {
                DesiredBuild = other.DesiredBuild;
            }
            if (other.HasLocale)
            {
                Locale = other.Locale;
            }
            if (other.HasLoggingId)
            {
                LoggingId = other.LoggingId;
            }
            if (other.HasMarketCheckin)
            {
                MarketCheckin = other.MarketCheckin;
            }
            macAddress_.Add(other.macAddress_);
            if (other.HasMeid)
            {
                Meid = other.Meid;
            }
            accountCookie_.Add(other.accountCookie_);
            if (other.HasTimeZone)
            {
                TimeZone = other.TimeZone;
            }
            if (other.HasSecurityToken)
            {
                SecurityToken = other.SecurityToken;
            }
            if (other.HasVersion)
            {
                Version = other.Version;
            }
            otaCert_.Add(other.otaCert_);
            if (other.HasSerial)
            {
                Serial = other.Serial;
            }
            if (other.HasEsn)
            {
                Esn = other.Esn;
            }
            if (other.deviceConfiguration_ != null)
            {
                if (deviceConfiguration_ == null)
                {
                    DeviceConfiguration = new global::Google.Protobuf.checkin.CheckinRequest.Types.DeviceConfig();
                }
                DeviceConfiguration.MergeFrom(other.DeviceConfiguration);
            }
            macAddressType_.Add(other.macAddressType_);
            if (other.HasFragment)
            {
                Fragment = other.Fragment;
            }
            if (other.HasUserName)
            {
                UserName = other.UserName;
            }
            if (other.HasUserSerialNumber)
            {
                UserSerialNumber = other.UserSerialNumber;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Imei = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            AndroidId = input.ReadInt64();
                            break;
                        }
                    case 26:
                        {
                            Digest = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            if (checkin_ == null)
                            {
                                Checkin = new global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin();
                            }
                            input.ReadMessage(Checkin);
                            break;
                        }
                    case 42:
                        {
                            DesiredBuild = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            Locale = input.ReadString();
                            break;
                        }
                    case 56:
                        {
                            LoggingId = input.ReadInt64();
                            break;
                        }
                    case 66:
                        {
                            MarketCheckin = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            macAddress_.AddEntriesFrom(input, _repeated_macAddress_codec);
                            break;
                        }
                    case 82:
                        {
                            Meid = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            accountCookie_.AddEntriesFrom(input, _repeated_accountCookie_codec);
                            break;
                        }
                    case 98:
                        {
                            TimeZone = input.ReadString();
                            break;
                        }
                    case 105:
                        {
                            SecurityToken = input.ReadFixed64();
                            break;
                        }
                    case 112:
                        {
                            Version = input.ReadInt32();
                            break;
                        }
                    case 122:
                        {
                            otaCert_.AddEntriesFrom(input, _repeated_otaCert_codec);
                            break;
                        }
                    case 130:
                        {
                            Serial = input.ReadString();
                            break;
                        }
                    case 138:
                        {
                            Esn = input.ReadString();
                            break;
                        }
                    case 146:
                        {
                            if (deviceConfiguration_ == null)
                            {
                                DeviceConfiguration = new global::Google.Protobuf.checkin.CheckinRequest.Types.DeviceConfig();
                            }
                            input.ReadMessage(DeviceConfiguration);
                            break;
                        }
                    case 154:
                        {
                            macAddressType_.AddEntriesFrom(input, _repeated_macAddressType_codec);
                            break;
                        }
                    case 160:
                        {
                            Fragment = input.ReadInt32();
                            break;
                        }
                    case 170:
                        {
                            UserName = input.ReadString();
                            break;
                        }
                    case 176:
                        {
                            UserSerialNumber = input.ReadInt32();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CheckinRequest message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Checkin : pb::IMessage<Checkin>
            {
                private static readonly pb::MessageParser<Checkin> _parser = new pb::MessageParser<Checkin>(() => new Checkin());
                private pb::UnknownFieldSet _unknownFields;
                private int _hasBits0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Checkin> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Google.Protobuf.checkin.CheckinRequest.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Checkin()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Checkin(Checkin other) : this()
                {
                    _hasBits0 = other._hasBits0;
                    build_ = other.build_ != null ? other.build_.Clone() : null;
                    lastCheckinMs_ = other.lastCheckinMs_;
                    event_ = other.event_.Clone();
                    stat_ = other.stat_.Clone();
                    requestedGroup_ = other.requestedGroup_.Clone();
                    cellOperator_ = other.cellOperator_;
                    simOperator_ = other.simOperator_;
                    roaming_ = other.roaming_;
                    userNumber_ = other.userNumber_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Checkin Clone()
                {
                    return new Checkin(this);
                }

                /// <summary>Field number for the "build" field.</summary>
                public const int BuildFieldNumber = 1;
                private global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Build build_;
                /// <summary>
                /// empty Build on pre-checkin
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Build Build
                {
                    get { return build_; }
                    set
                    {
                        build_ = value;
                    }
                }

                /// <summary>Field number for the "lastCheckinMs" field.</summary>
                public const int LastCheckinMsFieldNumber = 2;
                private readonly static long LastCheckinMsDefaultValue = 0L;

                private long lastCheckinMs_;
                /// <summary>
                /// last checkin ms or 0 if first checkin
                /// eg. 0
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long LastCheckinMs
                {
                    get { if ((_hasBits0 & 1) != 0) { return lastCheckinMs_; } else { return LastCheckinMsDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 1;
                        lastCheckinMs_ = value;
                    }
                }
                /// <summary>Gets whether the "lastCheckinMs" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasLastCheckinMs
                {
                    get { return (_hasBits0 & 1) != 0; }
                }
                /// <summary>Clears the value of the "lastCheckinMs" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearLastCheckinMs()
                {
                    _hasBits0 &= ~1;
                }

                /// <summary>Field number for the "event" field.</summary>
                public const int EventFieldNumber = 3;
                private static readonly pb::FieldCodec<global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Event> _repeated_event_codec
                    = pb::FieldCodec.ForMessage(26, global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Event.Parser);
                private readonly pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Event> event_ = new pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Event>();
                /// <summary>
                /// eg. ("event_log_start",~,1424612602652) on first checkin
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Event> Event
                {
                    get { return event_; }
                }

                /// <summary>Field number for the "stat" field.</summary>
                public const int StatFieldNumber = 4;
                private static readonly pb::FieldCodec<global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Statistic> _repeated_stat_codec
                    = pb::FieldCodec.ForMessage(34, global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Statistic.Parser);
                private readonly pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Statistic> stat_ = new pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Statistic>();
                /// <summary>
                /// unknown, n/a on first checkin
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Statistic> Stat
                {
                    get { return stat_; }
                }

                /// <summary>Field number for the "requestedGroup" field.</summary>
                public const int RequestedGroupFieldNumber = 5;
                private static readonly pb::FieldCodec<string> _repeated_requestedGroup_codec
                    = pb::FieldCodec.ForString(42);
                private readonly pbc::RepeatedField<string> requestedGroup_ = new pbc::RepeatedField<string>();
                /// <summary>
                /// unused
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> RequestedGroup
                {
                    get { return requestedGroup_; }
                }

                /// <summary>Field number for the "cellOperator" field.</summary>
                public const int CellOperatorFieldNumber = 6;
                private readonly static string CellOperatorDefaultValue = "";

                private string cellOperator_;
                /// <summary>
                /// TelephonyManager.getNetworkOperator != null|empty
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string CellOperator
                {
                    get { return cellOperator_ ?? CellOperatorDefaultValue; }
                    set
                    {
                        cellOperator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "cellOperator" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasCellOperator
                {
                    get { return cellOperator_ != null; }
                }
                /// <summary>Clears the value of the "cellOperator" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearCellOperator()
                {
                    cellOperator_ = null;
                }

                /// <summary>Field number for the "simOperator" field.</summary>
                public const int SimOperatorFieldNumber = 7;
                private readonly static string SimOperatorDefaultValue = "";

                private string simOperator_;
                /// <summary>
                /// TelephonyManager.getSimOperator != null|empty
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string SimOperator
                {
                    get { return simOperator_ ?? SimOperatorDefaultValue; }
                    set
                    {
                        simOperator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "simOperator" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasSimOperator
                {
                    get { return simOperator_ != null; }
                }
                /// <summary>Clears the value of the "simOperator" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSimOperator()
                {
                    simOperator_ = null;
                }

                /// <summary>Field number for the "roaming" field.</summary>
                public const int RoamingFieldNumber = 8;
                private readonly static string RoamingDefaultValue = "";

                private string roaming_;
                /// <summary>
                /// "WIFI::" | ("mobile" | "notmobile" | "unknown") + "-" + ("roaming" | "notroaming" | "unknown")
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Roaming
                {
                    get { return roaming_ ?? RoamingDefaultValue; }
                    set
                    {
                        roaming_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "roaming" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasRoaming
                {
                    get { return roaming_ != null; }
                }
                /// <summary>Clears the value of the "roaming" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearRoaming()
                {
                    roaming_ = null;
                }

                /// <summary>Field number for the "userNumber" field.</summary>
                public const int UserNumberFieldNumber = 9;
                private readonly static int UserNumberDefaultValue = 0;

                private int userNumber_;
                /// <summary>
                /// UserHandle.myUserId
                /// eg. 0
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int UserNumber
                {
                    get { if ((_hasBits0 & 2) != 0) { return userNumber_; } else { return UserNumberDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 2;
                        userNumber_ = value;
                    }
                }
                /// <summary>Gets whether the "userNumber" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasUserNumber
                {
                    get { return (_hasBits0 & 2) != 0; }
                }
                /// <summary>Clears the value of the "userNumber" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearUserNumber()
                {
                    _hasBits0 &= ~2;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Checkin);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Checkin other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (!object.Equals(Build, other.Build)) return false;
                    if (LastCheckinMs != other.LastCheckinMs) return false;
                    if (!event_.Equals(other.event_)) return false;
                    if (!stat_.Equals(other.stat_)) return false;
                    if (!requestedGroup_.Equals(other.requestedGroup_)) return false;
                    if (CellOperator != other.CellOperator) return false;
                    if (SimOperator != other.SimOperator) return false;
                    if (Roaming != other.Roaming) return false;
                    if (UserNumber != other.UserNumber) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (build_ != null) hash ^= Build.GetHashCode();
                    if (HasLastCheckinMs) hash ^= LastCheckinMs.GetHashCode();
                    hash ^= event_.GetHashCode();
                    hash ^= stat_.GetHashCode();
                    hash ^= requestedGroup_.GetHashCode();
                    if (HasCellOperator) hash ^= CellOperator.GetHashCode();
                    if (HasSimOperator) hash ^= SimOperator.GetHashCode();
                    if (HasRoaming) hash ^= Roaming.GetHashCode();
                    if (HasUserNumber) hash ^= UserNumber.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (build_ != null)
                    {
                        output.WriteRawTag(10);
                        output.WriteMessage(Build);
                    }
                    if (HasLastCheckinMs)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt64(LastCheckinMs);
                    }
                    event_.WriteTo(output, _repeated_event_codec);
                    stat_.WriteTo(output, _repeated_stat_codec);
                    requestedGroup_.WriteTo(output, _repeated_requestedGroup_codec);
                    if (HasCellOperator)
                    {
                        output.WriteRawTag(50);
                        output.WriteString(CellOperator);
                    }
                    if (HasSimOperator)
                    {
                        output.WriteRawTag(58);
                        output.WriteString(SimOperator);
                    }
                    if (HasRoaming)
                    {
                        output.WriteRawTag(66);
                        output.WriteString(Roaming);
                    }
                    if (HasUserNumber)
                    {
                        output.WriteRawTag(72);
                        output.WriteInt32(UserNumber);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (build_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Build);
                    }
                    if (HasLastCheckinMs)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCheckinMs);
                    }
                    size += event_.CalculateSize(_repeated_event_codec);
                    size += stat_.CalculateSize(_repeated_stat_codec);
                    size += requestedGroup_.CalculateSize(_repeated_requestedGroup_codec);
                    if (HasCellOperator)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(CellOperator);
                    }
                    if (HasSimOperator)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(SimOperator);
                    }
                    if (HasRoaming)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roaming);
                    }
                    if (HasUserNumber)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserNumber);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Checkin other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.build_ != null)
                    {
                        if (build_ == null)
                        {
                            Build = new global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Build();
                        }
                        Build.MergeFrom(other.Build);
                    }
                    if (other.HasLastCheckinMs)
                    {
                        LastCheckinMs = other.LastCheckinMs;
                    }
                    event_.Add(other.event_);
                    stat_.Add(other.stat_);
                    requestedGroup_.Add(other.requestedGroup_);
                    if (other.HasCellOperator)
                    {
                        CellOperator = other.CellOperator;
                    }
                    if (other.HasSimOperator)
                    {
                        SimOperator = other.SimOperator;
                    }
                    if (other.HasRoaming)
                    {
                        Roaming = other.Roaming;
                    }
                    if (other.HasUserNumber)
                    {
                        UserNumber = other.UserNumber;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    if (build_ == null)
                                    {
                                        Build = new global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Types.Build();
                                    }
                                    input.ReadMessage(Build);
                                    break;
                                }
                            case 16:
                                {
                                    LastCheckinMs = input.ReadInt64();
                                    break;
                                }
                            case 26:
                                {
                                    event_.AddEntriesFrom(input, _repeated_event_codec);
                                    break;
                                }
                            case 34:
                                {
                                    stat_.AddEntriesFrom(input, _repeated_stat_codec);
                                    break;
                                }
                            case 42:
                                {
                                    requestedGroup_.AddEntriesFrom(input, _repeated_requestedGroup_codec);
                                    break;
                                }
                            case 50:
                                {
                                    CellOperator = input.ReadString();
                                    break;
                                }
                            case 58:
                                {
                                    SimOperator = input.ReadString();
                                    break;
                                }
                            case 66:
                                {
                                    Roaming = input.ReadString();
                                    break;
                                }
                            case 72:
                                {
                                    UserNumber = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the Checkin message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public sealed partial class Build : pb::IMessage<Build>
                    {
                        private static readonly pb::MessageParser<Build> _parser = new pb::MessageParser<Build>(() => new Build());
                        private pb::UnknownFieldSet _unknownFields;
                        private int _hasBits0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<Build> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Descriptor.NestedTypes[0]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Build()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Build(Build other) : this()
                        {
                            _hasBits0 = other._hasBits0;
                            fingerprint_ = other.fingerprint_;
                            hardware_ = other.hardware_;
                            brand_ = other.brand_;
                            radio_ = other.radio_;
                            bootloader_ = other.bootloader_;
                            clientId_ = other.clientId_;
                            time_ = other.time_;
                            packageVersionCode_ = other.packageVersionCode_;
                            device_ = other.device_;
                            sdkVersion_ = other.sdkVersion_;
                            model_ = other.model_;
                            manufacturer_ = other.manufacturer_;
                            product_ = other.product_;
                            otaInstalled_ = other.otaInstalled_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Build Clone()
                        {
                            return new Build(this);
                        }

                        /// <summary>Field number for the "fingerprint" field.</summary>
                        public const int FingerprintFieldNumber = 1;
                        private readonly static string FingerprintDefaultValue = "";

                        private string fingerprint_;
                        /// <summary>
                        /// Build.FINGERPRINT
                        /// eg. google/razor/flo:5.0.1/LRX22C/1602158:user/release-keys
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Fingerprint
                        {
                            get { return fingerprint_ ?? FingerprintDefaultValue; }
                            set
                            {
                                fingerprint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "fingerprint" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasFingerprint
                        {
                            get { return fingerprint_ != null; }
                        }
                        /// <summary>Clears the value of the "fingerprint" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearFingerprint()
                        {
                            fingerprint_ = null;
                        }

                        /// <summary>Field number for the "hardware" field.</summary>
                        public const int HardwareFieldNumber = 2;
                        private readonly static string HardwareDefaultValue = "";

                        private string hardware_;
                        /// <summary>
                        /// Build.HARDWARE
                        /// eg. flo
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Hardware
                        {
                            get { return hardware_ ?? HardwareDefaultValue; }
                            set
                            {
                                hardware_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "hardware" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasHardware
                        {
                            get { return hardware_ != null; }
                        }
                        /// <summary>Clears the value of the "hardware" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearHardware()
                        {
                            hardware_ = null;
                        }

                        /// <summary>Field number for the "brand" field.</summary>
                        public const int BrandFieldNumber = 3;
                        private readonly static string BrandDefaultValue = "";

                        private string brand_;
                        /// <summary>
                        /// Build.BRAND
                        /// eg. google
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Brand
                        {
                            get { return brand_ ?? BrandDefaultValue; }
                            set
                            {
                                brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "brand" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasBrand
                        {
                            get { return brand_ != null; }
                        }
                        /// <summary>Clears the value of the "brand" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearBrand()
                        {
                            brand_ = null;
                        }

                        /// <summary>Field number for the "radio" field.</summary>
                        public const int RadioFieldNumber = 4;
                        private readonly static string RadioDefaultValue = "";

                        private string radio_;
                        /// <summary>
                        /// Build.getRadioVersion()
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Radio
                        {
                            get { return radio_ ?? RadioDefaultValue; }
                            set
                            {
                                radio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "radio" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasRadio
                        {
                            get { return radio_ != null; }
                        }
                        /// <summary>Clears the value of the "radio" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearRadio()
                        {
                            radio_ = null;
                        }

                        /// <summary>Field number for the "bootloader" field.</summary>
                        public const int BootloaderFieldNumber = 5;
                        private readonly static string BootloaderDefaultValue = "";

                        private string bootloader_;
                        /// <summary>
                        /// Build.BOOTLOADER
                        /// eg. FLO-04.04
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Bootloader
                        {
                            get { return bootloader_ ?? BootloaderDefaultValue; }
                            set
                            {
                                bootloader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "bootloader" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasBootloader
                        {
                            get { return bootloader_ != null; }
                        }
                        /// <summary>Clears the value of the "bootloader" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearBootloader()
                        {
                            bootloader_ = null;
                        }

                        /// <summary>Field number for the "clientId" field.</summary>
                        public const int ClientIdFieldNumber = 6;
                        private readonly static string ClientIdDefaultValue = "";

                        private string clientId_;
                        /// <summary>
                        /// GoogleSettingsContract.Partner["client_id"]
                        /// eg. android-google
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string ClientId
                        {
                            get { return clientId_ ?? ClientIdDefaultValue; }
                            set
                            {
                                clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "clientId" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasClientId
                        {
                            get { return clientId_ != null; }
                        }
                        /// <summary>Clears the value of the "clientId" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearClientId()
                        {
                            clientId_ = null;
                        }

                        /// <summary>Field number for the "time" field.</summary>
                        public const int TimeFieldNumber = 7;
                        private readonly static long TimeDefaultValue = 0L;

                        private long time_;
                        /// <summary>
                        /// Build.TIME / 1000L
                        /// eg. 1416533192
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public long Time
                        {
                            get { if ((_hasBits0 & 1) != 0) { return time_; } else { return TimeDefaultValue; } }
                            set
                            {
                                _hasBits0 |= 1;
                                time_ = value;
                            }
                        }
                        /// <summary>Gets whether the "time" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasTime
                        {
                            get { return (_hasBits0 & 1) != 0; }
                        }
                        /// <summary>Clears the value of the "time" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearTime()
                        {
                            _hasBits0 &= ~1;
                        }

                        /// <summary>Field number for the "packageVersionCode" field.</summary>
                        public const int PackageVersionCodeFieldNumber = 8;
                        private readonly static int PackageVersionCodeDefaultValue = 0;

                        private int packageVersionCode_;
                        /// <summary>
                        /// PackageInfo.versionCode
                        /// eg. 6188736
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int PackageVersionCode
                        {
                            get { if ((_hasBits0 & 2) != 0) { return packageVersionCode_; } else { return PackageVersionCodeDefaultValue; } }
                            set
                            {
                                _hasBits0 |= 2;
                                packageVersionCode_ = value;
                            }
                        }
                        /// <summary>Gets whether the "packageVersionCode" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasPackageVersionCode
                        {
                            get { return (_hasBits0 & 2) != 0; }
                        }
                        /// <summary>Clears the value of the "packageVersionCode" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearPackageVersionCode()
                        {
                            _hasBits0 &= ~2;
                        }

                        /// <summary>Field number for the "device" field.</summary>
                        public const int DeviceFieldNumber = 9;
                        private readonly static string DeviceDefaultValue = "";

                        private string device_;
                        /// <summary>
                        /// Build.DEVICE
                        /// eg. flo
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Device
                        {
                            get { return device_ ?? DeviceDefaultValue; }
                            set
                            {
                                device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "device" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasDevice
                        {
                            get { return device_ != null; }
                        }
                        /// <summary>Clears the value of the "device" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearDevice()
                        {
                            device_ = null;
                        }

                        /// <summary>Field number for the "sdkVersion" field.</summary>
                        public const int SdkVersionFieldNumber = 10;
                        private readonly static int SdkVersionDefaultValue = 0;

                        private int sdkVersion_;
                        /// <summary>
                        /// Build.VERSION.SDK_INT
                        /// eg. 21
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int SdkVersion
                        {
                            get { if ((_hasBits0 & 4) != 0) { return sdkVersion_; } else { return SdkVersionDefaultValue; } }
                            set
                            {
                                _hasBits0 |= 4;
                                sdkVersion_ = value;
                            }
                        }
                        /// <summary>Gets whether the "sdkVersion" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasSdkVersion
                        {
                            get { return (_hasBits0 & 4) != 0; }
                        }
                        /// <summary>Clears the value of the "sdkVersion" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearSdkVersion()
                        {
                            _hasBits0 &= ~4;
                        }

                        /// <summary>Field number for the "model" field.</summary>
                        public const int ModelFieldNumber = 11;
                        private readonly static string ModelDefaultValue = "";

                        private string model_;
                        /// <summary>
                        /// Build.MODEL
                        /// eg. Nexus 7
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Model
                        {
                            get { return model_ ?? ModelDefaultValue; }
                            set
                            {
                                model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "model" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasModel
                        {
                            get { return model_ != null; }
                        }
                        /// <summary>Clears the value of the "model" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearModel()
                        {
                            model_ = null;
                        }

                        /// <summary>Field number for the "manufacturer" field.</summary>
                        public const int ManufacturerFieldNumber = 12;
                        private readonly static string ManufacturerDefaultValue = "";

                        private string manufacturer_;
                        /// <summary>
                        /// Build.MANUFACTURER
                        /// eg. asus
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Manufacturer
                        {
                            get { return manufacturer_ ?? ManufacturerDefaultValue; }
                            set
                            {
                                manufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "manufacturer" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasManufacturer
                        {
                            get { return manufacturer_ != null; }
                        }
                        /// <summary>Clears the value of the "manufacturer" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearManufacturer()
                        {
                            manufacturer_ = null;
                        }

                        /// <summary>Field number for the "product" field.</summary>
                        public const int ProductFieldNumber = 13;
                        private readonly static string ProductDefaultValue = "";

                        private string product_;
                        /// <summary>
                        /// Build.PRODUCT
                        /// eg. razor
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Product
                        {
                            get { return product_ ?? ProductDefaultValue; }
                            set
                            {
                                product_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "product" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasProduct
                        {
                            get { return product_ != null; }
                        }
                        /// <summary>Clears the value of the "product" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearProduct()
                        {
                            product_ = null;
                        }

                        /// <summary>Field number for the "otaInstalled" field.</summary>
                        public const int OtaInstalledFieldNumber = 14;
                        private readonly static bool OtaInstalledDefaultValue = false;

                        private bool otaInstalled_;
                        /// <summary>
                        /// fileExists("/system/recovery-from-boot.p")
                        /// eg. false
                        /// </summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool OtaInstalled
                        {
                            get { if ((_hasBits0 & 8) != 0) { return otaInstalled_; } else { return OtaInstalledDefaultValue; } }
                            set
                            {
                                _hasBits0 |= 8;
                                otaInstalled_ = value;
                            }
                        }
                        /// <summary>Gets whether the "otaInstalled" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasOtaInstalled
                        {
                            get { return (_hasBits0 & 8) != 0; }
                        }
                        /// <summary>Clears the value of the "otaInstalled" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearOtaInstalled()
                        {
                            _hasBits0 &= ~8;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as Build);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(Build other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Fingerprint != other.Fingerprint) return false;
                            if (Hardware != other.Hardware) return false;
                            if (Brand != other.Brand) return false;
                            if (Radio != other.Radio) return false;
                            if (Bootloader != other.Bootloader) return false;
                            if (ClientId != other.ClientId) return false;
                            if (Time != other.Time) return false;
                            if (PackageVersionCode != other.PackageVersionCode) return false;
                            if (Device != other.Device) return false;
                            if (SdkVersion != other.SdkVersion) return false;
                            if (Model != other.Model) return false;
                            if (Manufacturer != other.Manufacturer) return false;
                            if (Product != other.Product) return false;
                            if (OtaInstalled != other.OtaInstalled) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (HasFingerprint) hash ^= Fingerprint.GetHashCode();
                            if (HasHardware) hash ^= Hardware.GetHashCode();
                            if (HasBrand) hash ^= Brand.GetHashCode();
                            if (HasRadio) hash ^= Radio.GetHashCode();
                            if (HasBootloader) hash ^= Bootloader.GetHashCode();
                            if (HasClientId) hash ^= ClientId.GetHashCode();
                            if (HasTime) hash ^= Time.GetHashCode();
                            if (HasPackageVersionCode) hash ^= PackageVersionCode.GetHashCode();
                            if (HasDevice) hash ^= Device.GetHashCode();
                            if (HasSdkVersion) hash ^= SdkVersion.GetHashCode();
                            if (HasModel) hash ^= Model.GetHashCode();
                            if (HasManufacturer) hash ^= Manufacturer.GetHashCode();
                            if (HasProduct) hash ^= Product.GetHashCode();
                            if (HasOtaInstalled) hash ^= OtaInstalled.GetHashCode();
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (HasFingerprint)
                            {
                                output.WriteRawTag(10);
                                output.WriteString(Fingerprint);
                            }
                            if (HasHardware)
                            {
                                output.WriteRawTag(18);
                                output.WriteString(Hardware);
                            }
                            if (HasBrand)
                            {
                                output.WriteRawTag(26);
                                output.WriteString(Brand);
                            }
                            if (HasRadio)
                            {
                                output.WriteRawTag(34);
                                output.WriteString(Radio);
                            }
                            if (HasBootloader)
                            {
                                output.WriteRawTag(42);
                                output.WriteString(Bootloader);
                            }
                            if (HasClientId)
                            {
                                output.WriteRawTag(50);
                                output.WriteString(ClientId);
                            }
                            if (HasTime)
                            {
                                output.WriteRawTag(56);
                                output.WriteInt64(Time);
                            }
                            if (HasPackageVersionCode)
                            {
                                output.WriteRawTag(64);
                                output.WriteInt32(PackageVersionCode);
                            }
                            if (HasDevice)
                            {
                                output.WriteRawTag(74);
                                output.WriteString(Device);
                            }
                            if (HasSdkVersion)
                            {
                                output.WriteRawTag(80);
                                output.WriteInt32(SdkVersion);
                            }
                            if (HasModel)
                            {
                                output.WriteRawTag(90);
                                output.WriteString(Model);
                            }
                            if (HasManufacturer)
                            {
                                output.WriteRawTag(98);
                                output.WriteString(Manufacturer);
                            }
                            if (HasProduct)
                            {
                                output.WriteRawTag(106);
                                output.WriteString(Product);
                            }
                            if (HasOtaInstalled)
                            {
                                output.WriteRawTag(112);
                                output.WriteBool(OtaInstalled);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (HasFingerprint)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Fingerprint);
                            }
                            if (HasHardware)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Hardware);
                            }
                            if (HasBrand)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
                            }
                            if (HasRadio)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Radio);
                            }
                            if (HasBootloader)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Bootloader);
                            }
                            if (HasClientId)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
                            }
                            if (HasTime)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
                            }
                            if (HasPackageVersionCode)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageVersionCode);
                            }
                            if (HasDevice)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
                            }
                            if (HasSdkVersion)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SdkVersion);
                            }
                            if (HasModel)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
                            }
                            if (HasManufacturer)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Manufacturer);
                            }
                            if (HasProduct)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Product);
                            }
                            if (HasOtaInstalled)
                            {
                                size += 1 + 1;
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(Build other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.HasFingerprint)
                            {
                                Fingerprint = other.Fingerprint;
                            }
                            if (other.HasHardware)
                            {
                                Hardware = other.Hardware;
                            }
                            if (other.HasBrand)
                            {
                                Brand = other.Brand;
                            }
                            if (other.HasRadio)
                            {
                                Radio = other.Radio;
                            }
                            if (other.HasBootloader)
                            {
                                Bootloader = other.Bootloader;
                            }
                            if (other.HasClientId)
                            {
                                ClientId = other.ClientId;
                            }
                            if (other.HasTime)
                            {
                                Time = other.Time;
                            }
                            if (other.HasPackageVersionCode)
                            {
                                PackageVersionCode = other.PackageVersionCode;
                            }
                            if (other.HasDevice)
                            {
                                Device = other.Device;
                            }
                            if (other.HasSdkVersion)
                            {
                                SdkVersion = other.SdkVersion;
                            }
                            if (other.HasModel)
                            {
                                Model = other.Model;
                            }
                            if (other.HasManufacturer)
                            {
                                Manufacturer = other.Manufacturer;
                            }
                            if (other.HasProduct)
                            {
                                Product = other.Product;
                            }
                            if (other.HasOtaInstalled)
                            {
                                OtaInstalled = other.OtaInstalled;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 10:
                                        {
                                            Fingerprint = input.ReadString();
                                            break;
                                        }
                                    case 18:
                                        {
                                            Hardware = input.ReadString();
                                            break;
                                        }
                                    case 26:
                                        {
                                            Brand = input.ReadString();
                                            break;
                                        }
                                    case 34:
                                        {
                                            Radio = input.ReadString();
                                            break;
                                        }
                                    case 42:
                                        {
                                            Bootloader = input.ReadString();
                                            break;
                                        }
                                    case 50:
                                        {
                                            ClientId = input.ReadString();
                                            break;
                                        }
                                    case 56:
                                        {
                                            Time = input.ReadInt64();
                                            break;
                                        }
                                    case 64:
                                        {
                                            PackageVersionCode = input.ReadInt32();
                                            break;
                                        }
                                    case 74:
                                        {
                                            Device = input.ReadString();
                                            break;
                                        }
                                    case 80:
                                        {
                                            SdkVersion = input.ReadInt32();
                                            break;
                                        }
                                    case 90:
                                        {
                                            Model = input.ReadString();
                                            break;
                                        }
                                    case 98:
                                        {
                                            Manufacturer = input.ReadString();
                                            break;
                                        }
                                    case 106:
                                        {
                                            Product = input.ReadString();
                                            break;
                                        }
                                    case 112:
                                        {
                                            OtaInstalled = input.ReadBool();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class Event : pb::IMessage<Event>
                    {
                        private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
                        private pb::UnknownFieldSet _unknownFields;
                        private int _hasBits0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<Event> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Descriptor.NestedTypes[1]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Event()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Event(Event other) : this()
                        {
                            _hasBits0 = other._hasBits0;
                            tag_ = other.tag_;
                            value_ = other.value_;
                            timeMs_ = other.timeMs_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Event Clone()
                        {
                            return new Event(this);
                        }

                        /// <summary>Field number for the "tag" field.</summary>
                        public const int TagFieldNumber = 1;
                        private readonly static string TagDefaultValue = "";

                        private string tag_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Tag
                        {
                            get { return tag_ ?? TagDefaultValue; }
                            set
                            {
                                tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "tag" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasTag
                        {
                            get { return tag_ != null; }
                        }
                        /// <summary>Clears the value of the "tag" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearTag()
                        {
                            tag_ = null;
                        }

                        /// <summary>Field number for the "value" field.</summary>
                        public const int ValueFieldNumber = 2;
                        private readonly static string ValueDefaultValue = "";

                        private string value_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Value
                        {
                            get { return value_ ?? ValueDefaultValue; }
                            set
                            {
                                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "value" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasValue
                        {
                            get { return value_ != null; }
                        }
                        /// <summary>Clears the value of the "value" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearValue()
                        {
                            value_ = null;
                        }

                        /// <summary>Field number for the "timeMs" field.</summary>
                        public const int TimeMsFieldNumber = 3;
                        private readonly static long TimeMsDefaultValue = 0L;

                        private long timeMs_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public long TimeMs
                        {
                            get { if ((_hasBits0 & 1) != 0) { return timeMs_; } else { return TimeMsDefaultValue; } }
                            set
                            {
                                _hasBits0 |= 1;
                                timeMs_ = value;
                            }
                        }
                        /// <summary>Gets whether the "timeMs" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasTimeMs
                        {
                            get { return (_hasBits0 & 1) != 0; }
                        }
                        /// <summary>Clears the value of the "timeMs" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearTimeMs()
                        {
                            _hasBits0 &= ~1;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as Event);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(Event other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Tag != other.Tag) return false;
                            if (Value != other.Value) return false;
                            if (TimeMs != other.TimeMs) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (HasTag) hash ^= Tag.GetHashCode();
                            if (HasValue) hash ^= Value.GetHashCode();
                            if (HasTimeMs) hash ^= TimeMs.GetHashCode();
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (HasTag)
                            {
                                output.WriteRawTag(10);
                                output.WriteString(Tag);
                            }
                            if (HasValue)
                            {
                                output.WriteRawTag(18);
                                output.WriteString(Value);
                            }
                            if (HasTimeMs)
                            {
                                output.WriteRawTag(24);
                                output.WriteInt64(TimeMs);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (HasTag)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
                            }
                            if (HasValue)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
                            }
                            if (HasTimeMs)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeMs);
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(Event other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.HasTag)
                            {
                                Tag = other.Tag;
                            }
                            if (other.HasValue)
                            {
                                Value = other.Value;
                            }
                            if (other.HasTimeMs)
                            {
                                TimeMs = other.TimeMs;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 10:
                                        {
                                            Tag = input.ReadString();
                                            break;
                                        }
                                    case 18:
                                        {
                                            Value = input.ReadString();
                                            break;
                                        }
                                    case 24:
                                        {
                                            TimeMs = input.ReadInt64();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class Statistic : pb::IMessage<Statistic>
                    {
                        private static readonly pb::MessageParser<Statistic> _parser = new pb::MessageParser<Statistic>(() => new Statistic());
                        private pb::UnknownFieldSet _unknownFields;
                        private int _hasBits0;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<Statistic> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::Google.Protobuf.checkin.CheckinRequest.Types.Checkin.Descriptor.NestedTypes[2]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Statistic()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Statistic(Statistic other) : this()
                        {
                            _hasBits0 = other._hasBits0;
                            tag_ = other.tag_;
                            count_ = other.count_;
                            sum_ = other.sum_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Statistic Clone()
                        {
                            return new Statistic(this);
                        }

                        /// <summary>Field number for the "tag" field.</summary>
                        public const int TagFieldNumber = 1;
                        private readonly static string TagDefaultValue = "";

                        private string tag_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Tag
                        {
                            get { return tag_ ?? TagDefaultValue; }
                            set
                            {
                                tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "tag" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasTag
                        {
                            get { return tag_ != null; }
                        }
                        /// <summary>Clears the value of the "tag" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearTag()
                        {
                            tag_ = null;
                        }

                        /// <summary>Field number for the "count" field.</summary>
                        public const int CountFieldNumber = 2;
                        private readonly static int CountDefaultValue = 0;

                        private int count_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int Count
                        {
                            get { if ((_hasBits0 & 1) != 0) { return count_; } else { return CountDefaultValue; } }
                            set
                            {
                                _hasBits0 |= 1;
                                count_ = value;
                            }
                        }
                        /// <summary>Gets whether the "count" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasCount
                        {
                            get { return (_hasBits0 & 1) != 0; }
                        }
                        /// <summary>Clears the value of the "count" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearCount()
                        {
                            _hasBits0 &= ~1;
                        }

                        /// <summary>Field number for the "sum" field.</summary>
                        public const int SumFieldNumber = 3;
                        private readonly static float SumDefaultValue = 0F;

                        private float sum_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public float Sum
                        {
                            get { if ((_hasBits0 & 2) != 0) { return sum_; } else { return SumDefaultValue; } }
                            set
                            {
                                _hasBits0 |= 2;
                                sum_ = value;
                            }
                        }
                        /// <summary>Gets whether the "sum" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasSum
                        {
                            get { return (_hasBits0 & 2) != 0; }
                        }
                        /// <summary>Clears the value of the "sum" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearSum()
                        {
                            _hasBits0 &= ~2;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as Statistic);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(Statistic other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Tag != other.Tag) return false;
                            if (Count != other.Count) return false;
                            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sum, other.Sum)) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (HasTag) hash ^= Tag.GetHashCode();
                            if (HasCount) hash ^= Count.GetHashCode();
                            if (HasSum) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sum);
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (HasTag)
                            {
                                output.WriteRawTag(10);
                                output.WriteString(Tag);
                            }
                            if (HasCount)
                            {
                                output.WriteRawTag(16);
                                output.WriteInt32(Count);
                            }
                            if (HasSum)
                            {
                                output.WriteRawTag(29);
                                output.WriteFloat(Sum);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (HasTag)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
                            }
                            if (HasCount)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
                            }
                            if (HasSum)
                            {
                                size += 1 + 4;
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(Statistic other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.HasTag)
                            {
                                Tag = other.Tag;
                            }
                            if (other.HasCount)
                            {
                                Count = other.Count;
                            }
                            if (other.HasSum)
                            {
                                Sum = other.Sum;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 10:
                                        {
                                            Tag = input.ReadString();
                                            break;
                                        }
                                    case 16:
                                        {
                                            Count = input.ReadInt32();
                                            break;
                                        }
                                    case 29:
                                        {
                                            Sum = input.ReadFloat();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                }
                #endregion

            }

            public sealed partial class DeviceConfig : pb::IMessage<DeviceConfig>
            {
                private static readonly pb::MessageParser<DeviceConfig> _parser = new pb::MessageParser<DeviceConfig>(() => new DeviceConfig());
                private pb::UnknownFieldSet _unknownFields;
                private int _hasBits0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<DeviceConfig> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Google.Protobuf.checkin.CheckinRequest.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceConfig()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceConfig(DeviceConfig other) : this()
                {
                    _hasBits0 = other._hasBits0;
                    touchScreen_ = other.touchScreen_;
                    keyboardType_ = other.keyboardType_;
                    navigation_ = other.navigation_;
                    screenLayout_ = other.screenLayout_;
                    hasHardKeyboard_ = other.hasHardKeyboard_;
                    hasFiveWayNavigation_ = other.hasFiveWayNavigation_;
                    densityDpi_ = other.densityDpi_;
                    glEsVersion_ = other.glEsVersion_;
                    sharedLibrary_ = other.sharedLibrary_.Clone();
                    availableFeature_ = other.availableFeature_.Clone();
                    nativePlatform_ = other.nativePlatform_.Clone();
                    widthPixels_ = other.widthPixels_;
                    heightPixels_ = other.heightPixels_;
                    locale_ = other.locale_.Clone();
                    glExtension_ = other.glExtension_.Clone();
                    deviceClass_ = other.deviceClass_;
                    maxApkDownloadSizeMb_ = other.maxApkDownloadSizeMb_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public DeviceConfig Clone()
                {
                    return new DeviceConfig(this);
                }

                /// <summary>Field number for the "touchScreen" field.</summary>
                public const int TouchScreenFieldNumber = 1;
                private readonly static int TouchScreenDefaultValue = 0;

                private int touchScreen_;
                /// <summary>
                /// ConfigurationInfo.reqTouchScreen
                /// eg. 3
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int TouchScreen
                {
                    get { if ((_hasBits0 & 1) != 0) { return touchScreen_; } else { return TouchScreenDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 1;
                        touchScreen_ = value;
                    }
                }
                /// <summary>Gets whether the "touchScreen" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasTouchScreen
                {
                    get { return (_hasBits0 & 1) != 0; }
                }
                /// <summary>Clears the value of the "touchScreen" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearTouchScreen()
                {
                    _hasBits0 &= ~1;
                }

                /// <summary>Field number for the "keyboardType" field.</summary>
                public const int KeyboardTypeFieldNumber = 2;
                private readonly static int KeyboardTypeDefaultValue = 0;

                private int keyboardType_;
                /// <summary>
                /// ConfigurationInfo.reqKeyboardType
                /// eg. 1
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int KeyboardType
                {
                    get { if ((_hasBits0 & 2) != 0) { return keyboardType_; } else { return KeyboardTypeDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 2;
                        keyboardType_ = value;
                    }
                }
                /// <summary>Gets whether the "keyboardType" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasKeyboardType
                {
                    get { return (_hasBits0 & 2) != 0; }
                }
                /// <summary>Clears the value of the "keyboardType" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearKeyboardType()
                {
                    _hasBits0 &= ~2;
                }

                /// <summary>Field number for the "navigation" field.</summary>
                public const int NavigationFieldNumber = 3;
                private readonly static int NavigationDefaultValue = 0;

                private int navigation_;
                /// <summary>
                /// ConfigurationInfo.reqNavigation
                /// eg. 1
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int Navigation
                {
                    get { if ((_hasBits0 & 4) != 0) { return navigation_; } else { return NavigationDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 4;
                        navigation_ = value;
                    }
                }
                /// <summary>Gets whether the "navigation" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasNavigation
                {
                    get { return (_hasBits0 & 4) != 0; }
                }
                /// <summary>Clears the value of the "navigation" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearNavigation()
                {
                    _hasBits0 &= ~4;
                }

                /// <summary>Field number for the "screenLayout" field.</summary>
                public const int ScreenLayoutFieldNumber = 4;
                private readonly static int ScreenLayoutDefaultValue = 0;

                private int screenLayout_;
                /// <summary>
                /// ConfigurationInfo.screenLayout
                /// eg. 3
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int ScreenLayout
                {
                    get { if ((_hasBits0 & 8) != 0) { return screenLayout_; } else { return ScreenLayoutDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 8;
                        screenLayout_ = value;
                    }
                }
                /// <summary>Gets whether the "screenLayout" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasScreenLayout
                {
                    get { return (_hasBits0 & 8) != 0; }
                }
                /// <summary>Clears the value of the "screenLayout" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearScreenLayout()
                {
                    _hasBits0 &= ~8;
                }

                /// <summary>Field number for the "hasHardKeyboard" field.</summary>
                public const int HasHardKeyboardFieldNumber = 5;
                private readonly static bool HasHardKeyboardDefaultValue = false;

                private bool hasHardKeyboard_;
                /// <summary>
                /// ConfigurationInfo.reqInputFeatures &amp; ConfigurationInfo.INPUT_FEATURE_HARD_KEYBOARD
                /// eg. 0
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasHardKeyboard
                {
                    get { if ((_hasBits0 & 16) != 0) { return hasHardKeyboard_; } else { return HasHardKeyboardDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 16;
                        hasHardKeyboard_ = value;
                    }
                }
                /// <summary>Gets whether the "hasHardKeyboard" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasHasHardKeyboard
                {
                    get { return (_hasBits0 & 16) != 0; }
                }
                /// <summary>Clears the value of the "hasHardKeyboard" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearHasHardKeyboard()
                {
                    _hasBits0 &= ~16;
                }

                /// <summary>Field number for the "hasFiveWayNavigation" field.</summary>
                public const int HasFiveWayNavigationFieldNumber = 6;
                private readonly static bool HasFiveWayNavigationDefaultValue = false;

                private bool hasFiveWayNavigation_;
                /// <summary>
                /// ConfigurationInfo.reqInputFeatures &amp; ConfigurationInfo.INPUT_FEATURE_FIVE_WAY_NAV
                /// eg. 0
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasFiveWayNavigation
                {
                    get { if ((_hasBits0 & 32) != 0) { return hasFiveWayNavigation_; } else { return HasFiveWayNavigationDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 32;
                        hasFiveWayNavigation_ = value;
                    }
                }
                /// <summary>Gets whether the "hasFiveWayNavigation" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasHasFiveWayNavigation
                {
                    get { return (_hasBits0 & 32) != 0; }
                }
                /// <summary>Clears the value of the "hasFiveWayNavigation" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearHasFiveWayNavigation()
                {
                    _hasBits0 &= ~32;
                }

                /// <summary>Field number for the "densityDpi" field.</summary>
                public const int DensityDpiFieldNumber = 7;
                private readonly static int DensityDpiDefaultValue = 0;

                private int densityDpi_;
                /// <summary>
                /// DisplayMetrics.densityDpi
                /// eg. 320
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int DensityDpi
                {
                    get { if ((_hasBits0 & 64) != 0) { return densityDpi_; } else { return DensityDpiDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 64;
                        densityDpi_ = value;
                    }
                }
                /// <summary>Gets whether the "densityDpi" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasDensityDpi
                {
                    get { return (_hasBits0 & 64) != 0; }
                }
                /// <summary>Clears the value of the "densityDpi" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearDensityDpi()
                {
                    _hasBits0 &= ~64;
                }

                /// <summary>Field number for the "glEsVersion" field.</summary>
                public const int GlEsVersionFieldNumber = 8;
                private readonly static int GlEsVersionDefaultValue = 0;

                private int glEsVersion_;
                /// <summary>
                /// ConfigurationInfo.reqGlEsVersion
                /// eg. 196608
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int GlEsVersion
                {
                    get { if ((_hasBits0 & 128) != 0) { return glEsVersion_; } else { return GlEsVersionDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 128;
                        glEsVersion_ = value;
                    }
                }
                /// <summary>Gets whether the "glEsVersion" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasGlEsVersion
                {
                    get { return (_hasBits0 & 128) != 0; }
                }
                /// <summary>Clears the value of the "glEsVersion" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearGlEsVersion()
                {
                    _hasBits0 &= ~128;
                }

                /// <summary>Field number for the "sharedLibrary" field.</summary>
                public const int SharedLibraryFieldNumber = 9;
                private static readonly pb::FieldCodec<string> _repeated_sharedLibrary_codec
                    = pb::FieldCodec.ForString(74);
                private readonly pbc::RepeatedField<string> sharedLibrary_ = new pbc::RepeatedField<string>();
                /// <summary>
                /// PackageManager.getSystemSharedLibraryNames
                /// eg. "android.test.runner", "com.android.future.usb.accessory", "com.android.location.provider",
                ///     "com.android.media.remotedisplay", "com.android.mediadrm.signer", "com.google.android.maps",
                ///     "com.google.android.media.effects", "com.google.widevine.software.drm", "javax.obex"
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> SharedLibrary
                {
                    get { return sharedLibrary_; }
                }

                /// <summary>Field number for the "availableFeature" field.</summary>
                public const int AvailableFeatureFieldNumber = 10;
                private static readonly pb::FieldCodec<string> _repeated_availableFeature_codec
                    = pb::FieldCodec.ForString(82);
                private readonly pbc::RepeatedField<string> availableFeature_ = new pbc::RepeatedField<string>();
                /// <summary>
                /// PackageManager.getSystemAvailableFeatures
                /// eg. android.hardware.[...]
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> AvailableFeature
                {
                    get { return availableFeature_; }
                }

                /// <summary>Field number for the "nativePlatform" field.</summary>
                public const int NativePlatformFieldNumber = 11;
                private static readonly pb::FieldCodec<string> _repeated_nativePlatform_codec
                    = pb::FieldCodec.ForString(90);
                private readonly pbc::RepeatedField<string> nativePlatform_ = new pbc::RepeatedField<string>();
                /// <summary>
                /// Build.CPU_ABI and Build.CPU_ABI2 != "unknown"
                /// eg. "armeabi-v7a", "armeabi"
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> NativePlatform
                {
                    get { return nativePlatform_; }
                }

                /// <summary>Field number for the "widthPixels" field.</summary>
                public const int WidthPixelsFieldNumber = 12;
                private readonly static int WidthPixelsDefaultValue = 0;

                private int widthPixels_;
                /// <summary>
                /// DisplayMetrics.widthPixels
                /// eg. 1200
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int WidthPixels
                {
                    get { if ((_hasBits0 & 256) != 0) { return widthPixels_; } else { return WidthPixelsDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 256;
                        widthPixels_ = value;
                    }
                }
                /// <summary>Gets whether the "widthPixels" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasWidthPixels
                {
                    get { return (_hasBits0 & 256) != 0; }
                }
                /// <summary>Clears the value of the "widthPixels" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearWidthPixels()
                {
                    _hasBits0 &= ~256;
                }

                /// <summary>Field number for the "heightPixels" field.</summary>
                public const int HeightPixelsFieldNumber = 13;
                private readonly static int HeightPixelsDefaultValue = 0;

                private int heightPixels_;
                /// <summary>
                /// DisplayMetrics.heightPixels
                /// eg. 1824
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int HeightPixels
                {
                    get { if ((_hasBits0 & 512) != 0) { return heightPixels_; } else { return HeightPixelsDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 512;
                        heightPixels_ = value;
                    }
                }
                /// <summary>Gets whether the "heightPixels" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasHeightPixels
                {
                    get { return (_hasBits0 & 512) != 0; }
                }
                /// <summary>Clears the value of the "heightPixels" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearHeightPixels()
                {
                    _hasBits0 &= ~512;
                }

                /// <summary>Field number for the "locale" field.</summary>
                public const int LocaleFieldNumber = 14;
                private static readonly pb::FieldCodec<string> _repeated_locale_codec
                    = pb::FieldCodec.ForString(114);
                private readonly pbc::RepeatedField<string> locale_ = new pbc::RepeatedField<string>();
                /// <summary>
                /// Context.getAssets.getLocales
                /// eg. [...], "en-US", [...]
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> Locale
                {
                    get { return locale_; }
                }

                /// <summary>Field number for the "glExtension" field.</summary>
                public const int GlExtensionFieldNumber = 15;
                private static readonly pb::FieldCodec<string> _repeated_glExtension_codec
                    = pb::FieldCodec.ForString(122);
                private readonly pbc::RepeatedField<string> glExtension_ = new pbc::RepeatedField<string>();
                /// <summary>
                /// GLES10.glGetString(GLES10.GL_EXTENSIONS)
                /// eg. "GL_AMD_compressed_ATC_texture", [...]
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<string> GlExtension
                {
                    get { return glExtension_; }
                }

                /// <summary>Field number for the "deviceClass" field.</summary>
                public const int DeviceClassFieldNumber = 16;
                private readonly static int DeviceClassDefaultValue = 0;

                private int deviceClass_;
                /// <summary>
                /// unused
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int DeviceClass
                {
                    get { if ((_hasBits0 & 1024) != 0) { return deviceClass_; } else { return DeviceClassDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 1024;
                        deviceClass_ = value;
                    }
                }
                /// <summary>Gets whether the "deviceClass" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasDeviceClass
                {
                    get { return (_hasBits0 & 1024) != 0; }
                }
                /// <summary>Clears the value of the "deviceClass" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearDeviceClass()
                {
                    _hasBits0 &= ~1024;
                }

                /// <summary>Field number for the "maxApkDownloadSizeMb" field.</summary>
                public const int MaxApkDownloadSizeMbFieldNumber = 17;
                private readonly static int MaxApkDownloadSizeMbDefaultValue = 0;

                private int maxApkDownloadSizeMb_;
                /// <summary>
                /// unused
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int MaxApkDownloadSizeMb
                {
                    get { if ((_hasBits0 & 2048) != 0) { return maxApkDownloadSizeMb_; } else { return MaxApkDownloadSizeMbDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 2048;
                        maxApkDownloadSizeMb_ = value;
                    }
                }
                /// <summary>Gets whether the "maxApkDownloadSizeMb" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasMaxApkDownloadSizeMb
                {
                    get { return (_hasBits0 & 2048) != 0; }
                }
                /// <summary>Clears the value of the "maxApkDownloadSizeMb" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearMaxApkDownloadSizeMb()
                {
                    _hasBits0 &= ~2048;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as DeviceConfig);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(DeviceConfig other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (TouchScreen != other.TouchScreen) return false;
                    if (KeyboardType != other.KeyboardType) return false;
                    if (Navigation != other.Navigation) return false;
                    if (ScreenLayout != other.ScreenLayout) return false;
                    if (HasHardKeyboard != other.HasHardKeyboard) return false;
                    if (HasFiveWayNavigation != other.HasFiveWayNavigation) return false;
                    if (DensityDpi != other.DensityDpi) return false;
                    if (GlEsVersion != other.GlEsVersion) return false;
                    if (!sharedLibrary_.Equals(other.sharedLibrary_)) return false;
                    if (!availableFeature_.Equals(other.availableFeature_)) return false;
                    if (!nativePlatform_.Equals(other.nativePlatform_)) return false;
                    if (WidthPixels != other.WidthPixels) return false;
                    if (HeightPixels != other.HeightPixels) return false;
                    if (!locale_.Equals(other.locale_)) return false;
                    if (!glExtension_.Equals(other.glExtension_)) return false;
                    if (DeviceClass != other.DeviceClass) return false;
                    if (MaxApkDownloadSizeMb != other.MaxApkDownloadSizeMb) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HasTouchScreen) hash ^= TouchScreen.GetHashCode();
                    if (HasKeyboardType) hash ^= KeyboardType.GetHashCode();
                    if (HasNavigation) hash ^= Navigation.GetHashCode();
                    if (HasScreenLayout) hash ^= ScreenLayout.GetHashCode();
                    if (HasHasHardKeyboard) hash ^= HasHardKeyboard.GetHashCode();
                    if (HasHasFiveWayNavigation) hash ^= HasFiveWayNavigation.GetHashCode();
                    if (HasDensityDpi) hash ^= DensityDpi.GetHashCode();
                    if (HasGlEsVersion) hash ^= GlEsVersion.GetHashCode();
                    hash ^= sharedLibrary_.GetHashCode();
                    hash ^= availableFeature_.GetHashCode();
                    hash ^= nativePlatform_.GetHashCode();
                    if (HasWidthPixels) hash ^= WidthPixels.GetHashCode();
                    if (HasHeightPixels) hash ^= HeightPixels.GetHashCode();
                    hash ^= locale_.GetHashCode();
                    hash ^= glExtension_.GetHashCode();
                    if (HasDeviceClass) hash ^= DeviceClass.GetHashCode();
                    if (HasMaxApkDownloadSizeMb) hash ^= MaxApkDownloadSizeMb.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HasTouchScreen)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt32(TouchScreen);
                    }
                    if (HasKeyboardType)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(KeyboardType);
                    }
                    if (HasNavigation)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt32(Navigation);
                    }
                    if (HasScreenLayout)
                    {
                        output.WriteRawTag(32);
                        output.WriteInt32(ScreenLayout);
                    }
                    if (HasHasHardKeyboard)
                    {
                        output.WriteRawTag(40);
                        output.WriteBool(HasHardKeyboard);
                    }
                    if (HasHasFiveWayNavigation)
                    {
                        output.WriteRawTag(48);
                        output.WriteBool(HasFiveWayNavigation);
                    }
                    if (HasDensityDpi)
                    {
                        output.WriteRawTag(56);
                        output.WriteInt32(DensityDpi);
                    }
                    if (HasGlEsVersion)
                    {
                        output.WriteRawTag(64);
                        output.WriteInt32(GlEsVersion);
                    }
                    sharedLibrary_.WriteTo(output, _repeated_sharedLibrary_codec);
                    availableFeature_.WriteTo(output, _repeated_availableFeature_codec);
                    nativePlatform_.WriteTo(output, _repeated_nativePlatform_codec);
                    if (HasWidthPixels)
                    {
                        output.WriteRawTag(96);
                        output.WriteInt32(WidthPixels);
                    }
                    if (HasHeightPixels)
                    {
                        output.WriteRawTag(104);
                        output.WriteInt32(HeightPixels);
                    }
                    locale_.WriteTo(output, _repeated_locale_codec);
                    glExtension_.WriteTo(output, _repeated_glExtension_codec);
                    if (HasDeviceClass)
                    {
                        output.WriteRawTag(128, 1);
                        output.WriteInt32(DeviceClass);
                    }
                    if (HasMaxApkDownloadSizeMb)
                    {
                        output.WriteRawTag(136, 1);
                        output.WriteInt32(MaxApkDownloadSizeMb);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HasTouchScreen)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TouchScreen);
                    }
                    if (HasKeyboardType)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyboardType);
                    }
                    if (HasNavigation)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Navigation);
                    }
                    if (HasScreenLayout)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScreenLayout);
                    }
                    if (HasHasHardKeyboard)
                    {
                        size += 1 + 1;
                    }
                    if (HasHasFiveWayNavigation)
                    {
                        size += 1 + 1;
                    }
                    if (HasDensityDpi)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DensityDpi);
                    }
                    if (HasGlEsVersion)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GlEsVersion);
                    }
                    size += sharedLibrary_.CalculateSize(_repeated_sharedLibrary_codec);
                    size += availableFeature_.CalculateSize(_repeated_availableFeature_codec);
                    size += nativePlatform_.CalculateSize(_repeated_nativePlatform_codec);
                    if (HasWidthPixels)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthPixels);
                    }
                    if (HasHeightPixels)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightPixels);
                    }
                    size += locale_.CalculateSize(_repeated_locale_codec);
                    size += glExtension_.CalculateSize(_repeated_glExtension_codec);
                    if (HasDeviceClass)
                    {
                        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeviceClass);
                    }
                    if (HasMaxApkDownloadSizeMb)
                    {
                        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxApkDownloadSizeMb);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(DeviceConfig other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HasTouchScreen)
                    {
                        TouchScreen = other.TouchScreen;
                    }
                    if (other.HasKeyboardType)
                    {
                        KeyboardType = other.KeyboardType;
                    }
                    if (other.HasNavigation)
                    {
                        Navigation = other.Navigation;
                    }
                    if (other.HasScreenLayout)
                    {
                        ScreenLayout = other.ScreenLayout;
                    }
                    if (other.HasHasHardKeyboard)
                    {
                        HasHardKeyboard = other.HasHardKeyboard;
                    }
                    if (other.HasHasFiveWayNavigation)
                    {
                        HasFiveWayNavigation = other.HasFiveWayNavigation;
                    }
                    if (other.HasDensityDpi)
                    {
                        DensityDpi = other.DensityDpi;
                    }
                    if (other.HasGlEsVersion)
                    {
                        GlEsVersion = other.GlEsVersion;
                    }
                    sharedLibrary_.Add(other.sharedLibrary_);
                    availableFeature_.Add(other.availableFeature_);
                    nativePlatform_.Add(other.nativePlatform_);
                    if (other.HasWidthPixels)
                    {
                        WidthPixels = other.WidthPixels;
                    }
                    if (other.HasHeightPixels)
                    {
                        HeightPixels = other.HeightPixels;
                    }
                    locale_.Add(other.locale_);
                    glExtension_.Add(other.glExtension_);
                    if (other.HasDeviceClass)
                    {
                        DeviceClass = other.DeviceClass;
                    }
                    if (other.HasMaxApkDownloadSizeMb)
                    {
                        MaxApkDownloadSizeMb = other.MaxApkDownloadSizeMb;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    TouchScreen = input.ReadInt32();
                                    break;
                                }
                            case 16:
                                {
                                    KeyboardType = input.ReadInt32();
                                    break;
                                }
                            case 24:
                                {
                                    Navigation = input.ReadInt32();
                                    break;
                                }
                            case 32:
                                {
                                    ScreenLayout = input.ReadInt32();
                                    break;
                                }
                            case 40:
                                {
                                    HasHardKeyboard = input.ReadBool();
                                    break;
                                }
                            case 48:
                                {
                                    HasFiveWayNavigation = input.ReadBool();
                                    break;
                                }
                            case 56:
                                {
                                    DensityDpi = input.ReadInt32();
                                    break;
                                }
                            case 64:
                                {
                                    GlEsVersion = input.ReadInt32();
                                    break;
                                }
                            case 74:
                                {
                                    sharedLibrary_.AddEntriesFrom(input, _repeated_sharedLibrary_codec);
                                    break;
                                }
                            case 82:
                                {
                                    availableFeature_.AddEntriesFrom(input, _repeated_availableFeature_codec);
                                    break;
                                }
                            case 90:
                                {
                                    nativePlatform_.AddEntriesFrom(input, _repeated_nativePlatform_codec);
                                    break;
                                }
                            case 96:
                                {
                                    WidthPixels = input.ReadInt32();
                                    break;
                                }
                            case 104:
                                {
                                    HeightPixels = input.ReadInt32();
                                    break;
                                }
                            case 114:
                                {
                                    locale_.AddEntriesFrom(input, _repeated_locale_codec);
                                    break;
                                }
                            case 122:
                                {
                                    glExtension_.AddEntriesFrom(input, _repeated_glExtension_codec);
                                    break;
                                }
                            case 128:
                                {
                                    DeviceClass = input.ReadInt32();
                                    break;
                                }
                            case 136:
                                {
                                    MaxApkDownloadSizeMb = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class CheckinResponse : pb::IMessage<CheckinResponse>
    {
        private static readonly pb::MessageParser<CheckinResponse> _parser = new pb::MessageParser<CheckinResponse>(() => new CheckinResponse());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CheckinResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Google.Protobuf.checkin.CheckinReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckinResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckinResponse(CheckinResponse other) : this()
        {
            _hasBits0 = other._hasBits0;
            statsOk_ = other.statsOk_;
            intent_ = other.intent_.Clone();
            timeMs_ = other.timeMs_;
            digest_ = other.digest_;
            setting_ = other.setting_.Clone();
            marketOk_ = other.marketOk_;
            androidId_ = other.androidId_;
            securityToken_ = other.securityToken_;
            settingsDiff_ = other.settingsDiff_;
            deleteSetting_ = other.deleteSetting_.Clone();
            versionInfo_ = other.versionInfo_;
            deviceDataVersionInfo_ = other.deviceDataVersionInfo_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CheckinResponse Clone()
        {
            return new CheckinResponse(this);
        }

        /// <summary>Field number for the "statsOk" field.</summary>
        public const int StatsOkFieldNumber = 1;
        private readonly static bool StatsOkDefaultValue = false;

        private bool statsOk_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool StatsOk
        {
            get { if ((_hasBits0 & 1) != 0) { return statsOk_; } else { return StatsOkDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                statsOk_ = value;
            }
        }
        /// <summary>Gets whether the "statsOk" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStatsOk
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "statsOk" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStatsOk()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "intent" field.</summary>
        public const int IntentFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Protobuf.checkin.CheckinResponse.Types.Intent> _repeated_intent_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Parser);
        private readonly pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.Intent> intent_ = new pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.Intent>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.Intent> Intent
        {
            get { return intent_; }
        }

        /// <summary>Field number for the "timeMs" field.</summary>
        public const int TimeMsFieldNumber = 3;
        private readonly static long TimeMsDefaultValue = 0L;

        private long timeMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TimeMs
        {
            get { if ((_hasBits0 & 2) != 0) { return timeMs_; } else { return TimeMsDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                timeMs_ = value;
            }
        }
        /// <summary>Gets whether the "timeMs" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimeMs
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "timeMs" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimeMs()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "digest" field.</summary>
        public const int DigestFieldNumber = 4;
        private readonly static string DigestDefaultValue = "";

        private string digest_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Digest
        {
            get { return digest_ ?? DigestDefaultValue; }
            set
            {
                digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "digest" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDigest
        {
            get { return digest_ != null; }
        }
        /// <summary>Clears the value of the "digest" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDigest()
        {
            digest_ = null;
        }

        /// <summary>Field number for the "setting" field.</summary>
        public const int SettingFieldNumber = 5;
        private static readonly pb::FieldCodec<global::Google.Protobuf.checkin.CheckinResponse.Types.GservicesSetting> _repeated_setting_codec
            = pb::FieldCodec.ForMessage(42, global::Google.Protobuf.checkin.CheckinResponse.Types.GservicesSetting.Parser);
        private readonly pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.GservicesSetting> setting_ = new pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.GservicesSetting>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.GservicesSetting> Setting
        {
            get { return setting_; }
        }

        /// <summary>Field number for the "marketOk" field.</summary>
        public const int MarketOkFieldNumber = 6;
        private readonly static bool MarketOkDefaultValue = false;

        private bool marketOk_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MarketOk
        {
            get { if ((_hasBits0 & 4) != 0) { return marketOk_; } else { return MarketOkDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                marketOk_ = value;
            }
        }
        /// <summary>Gets whether the "marketOk" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMarketOk
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "marketOk" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMarketOk()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "androidId" field.</summary>
        public const int AndroidIdFieldNumber = 7;
        private readonly static ulong AndroidIdDefaultValue = 0UL;

        private ulong androidId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong AndroidId
        {
            get { if ((_hasBits0 & 8) != 0) { return androidId_; } else { return AndroidIdDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                androidId_ = value;
            }
        }
        /// <summary>Gets whether the "androidId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAndroidId
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "androidId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAndroidId()
        {
            _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "securityToken" field.</summary>
        public const int SecurityTokenFieldNumber = 8;
        private readonly static ulong SecurityTokenDefaultValue = 0UL;

        private ulong securityToken_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SecurityToken
        {
            get { if ((_hasBits0 & 16) != 0) { return securityToken_; } else { return SecurityTokenDefaultValue; } }
            set
            {
                _hasBits0 |= 16;
                securityToken_ = value;
            }
        }
        /// <summary>Gets whether the "securityToken" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSecurityToken
        {
            get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "securityToken" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSecurityToken()
        {
            _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "settingsDiff" field.</summary>
        public const int SettingsDiffFieldNumber = 9;
        private readonly static bool SettingsDiffDefaultValue = false;

        private bool settingsDiff_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool SettingsDiff
        {
            get { if ((_hasBits0 & 32) != 0) { return settingsDiff_; } else { return SettingsDiffDefaultValue; } }
            set
            {
                _hasBits0 |= 32;
                settingsDiff_ = value;
            }
        }
        /// <summary>Gets whether the "settingsDiff" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSettingsDiff
        {
            get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "settingsDiff" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSettingsDiff()
        {
            _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "deleteSetting" field.</summary>
        public const int DeleteSettingFieldNumber = 10;
        private static readonly pb::FieldCodec<string> _repeated_deleteSetting_codec
            = pb::FieldCodec.ForString(82);
        private readonly pbc::RepeatedField<string> deleteSetting_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> DeleteSetting
        {
            get { return deleteSetting_; }
        }

        /// <summary>Field number for the "versionInfo" field.</summary>
        public const int VersionInfoFieldNumber = 11;
        private readonly static string VersionInfoDefaultValue = "";

        private string versionInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string VersionInfo
        {
            get { return versionInfo_ ?? VersionInfoDefaultValue; }
            set
            {
                versionInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "versionInfo" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasVersionInfo
        {
            get { return versionInfo_ != null; }
        }
        /// <summary>Clears the value of the "versionInfo" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearVersionInfo()
        {
            versionInfo_ = null;
        }

        /// <summary>Field number for the "deviceDataVersionInfo" field.</summary>
        public const int DeviceDataVersionInfoFieldNumber = 12;
        private readonly static string DeviceDataVersionInfoDefaultValue = "";

        private string deviceDataVersionInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceDataVersionInfo
        {
            get { return deviceDataVersionInfo_ ?? DeviceDataVersionInfoDefaultValue; }
            set
            {
                deviceDataVersionInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "deviceDataVersionInfo" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeviceDataVersionInfo
        {
            get { return deviceDataVersionInfo_ != null; }
        }
        /// <summary>Clears the value of the "deviceDataVersionInfo" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeviceDataVersionInfo()
        {
            deviceDataVersionInfo_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CheckinResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CheckinResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (StatsOk != other.StatsOk) return false;
            if (!intent_.Equals(other.intent_)) return false;
            if (TimeMs != other.TimeMs) return false;
            if (Digest != other.Digest) return false;
            if (!setting_.Equals(other.setting_)) return false;
            if (MarketOk != other.MarketOk) return false;
            if (AndroidId != other.AndroidId) return false;
            if (SecurityToken != other.SecurityToken) return false;
            if (SettingsDiff != other.SettingsDiff) return false;
            if (!deleteSetting_.Equals(other.deleteSetting_)) return false;
            if (VersionInfo != other.VersionInfo) return false;
            if (DeviceDataVersionInfo != other.DeviceDataVersionInfo) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasStatsOk) hash ^= StatsOk.GetHashCode();
            hash ^= intent_.GetHashCode();
            if (HasTimeMs) hash ^= TimeMs.GetHashCode();
            if (HasDigest) hash ^= Digest.GetHashCode();
            hash ^= setting_.GetHashCode();
            if (HasMarketOk) hash ^= MarketOk.GetHashCode();
            if (HasAndroidId) hash ^= AndroidId.GetHashCode();
            if (HasSecurityToken) hash ^= SecurityToken.GetHashCode();
            if (HasSettingsDiff) hash ^= SettingsDiff.GetHashCode();
            hash ^= deleteSetting_.GetHashCode();
            if (HasVersionInfo) hash ^= VersionInfo.GetHashCode();
            if (HasDeviceDataVersionInfo) hash ^= DeviceDataVersionInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasStatsOk)
            {
                output.WriteRawTag(8);
                output.WriteBool(StatsOk);
            }
            intent_.WriteTo(output, _repeated_intent_codec);
            if (HasTimeMs)
            {
                output.WriteRawTag(24);
                output.WriteInt64(TimeMs);
            }
            if (HasDigest)
            {
                output.WriteRawTag(34);
                output.WriteString(Digest);
            }
            setting_.WriteTo(output, _repeated_setting_codec);
            if (HasMarketOk)
            {
                output.WriteRawTag(48);
                output.WriteBool(MarketOk);
            }
            if (HasAndroidId)
            {
                output.WriteRawTag(57);
                output.WriteFixed64(AndroidId);
            }
            if (HasSecurityToken)
            {
                output.WriteRawTag(65);
                output.WriteFixed64(SecurityToken);
            }
            if (HasSettingsDiff)
            {
                output.WriteRawTag(72);
                output.WriteBool(SettingsDiff);
            }
            deleteSetting_.WriteTo(output, _repeated_deleteSetting_codec);
            if (HasVersionInfo)
            {
                output.WriteRawTag(90);
                output.WriteString(VersionInfo);
            }
            if (HasDeviceDataVersionInfo)
            {
                output.WriteRawTag(98);
                output.WriteString(DeviceDataVersionInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasStatsOk)
            {
                size += 1 + 1;
            }
            size += intent_.CalculateSize(_repeated_intent_codec);
            if (HasTimeMs)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeMs);
            }
            if (HasDigest)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Digest);
            }
            size += setting_.CalculateSize(_repeated_setting_codec);
            if (HasMarketOk)
            {
                size += 1 + 1;
            }
            if (HasAndroidId)
            {
                size += 1 + 8;
            }
            if (HasSecurityToken)
            {
                size += 1 + 8;
            }
            if (HasSettingsDiff)
            {
                size += 1 + 1;
            }
            size += deleteSetting_.CalculateSize(_repeated_deleteSetting_codec);
            if (HasVersionInfo)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionInfo);
            }
            if (HasDeviceDataVersionInfo)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceDataVersionInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CheckinResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasStatsOk)
            {
                StatsOk = other.StatsOk;
            }
            intent_.Add(other.intent_);
            if (other.HasTimeMs)
            {
                TimeMs = other.TimeMs;
            }
            if (other.HasDigest)
            {
                Digest = other.Digest;
            }
            setting_.Add(other.setting_);
            if (other.HasMarketOk)
            {
                MarketOk = other.MarketOk;
            }
            if (other.HasAndroidId)
            {
                AndroidId = other.AndroidId;
            }
            if (other.HasSecurityToken)
            {
                SecurityToken = other.SecurityToken;
            }
            if (other.HasSettingsDiff)
            {
                SettingsDiff = other.SettingsDiff;
            }
            deleteSetting_.Add(other.deleteSetting_);
            if (other.HasVersionInfo)
            {
                VersionInfo = other.VersionInfo;
            }
            if (other.HasDeviceDataVersionInfo)
            {
                DeviceDataVersionInfo = other.DeviceDataVersionInfo;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            StatsOk = input.ReadBool();
                            break;
                        }
                    case 18:
                        {
                            intent_.AddEntriesFrom(input, _repeated_intent_codec);
                            break;
                        }
                    case 24:
                        {
                            TimeMs = input.ReadInt64();
                            break;
                        }
                    case 34:
                        {
                            Digest = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            setting_.AddEntriesFrom(input, _repeated_setting_codec);
                            break;
                        }
                    case 48:
                        {
                            MarketOk = input.ReadBool();
                            break;
                        }
                    case 57:
                        {
                            AndroidId = input.ReadFixed64();
                            break;
                        }
                    case 65:
                        {
                            SecurityToken = input.ReadFixed64();
                            break;
                        }
                    case 72:
                        {
                            SettingsDiff = input.ReadBool();
                            break;
                        }
                    case 82:
                        {
                            deleteSetting_.AddEntriesFrom(input, _repeated_deleteSetting_codec);
                            break;
                        }
                    case 90:
                        {
                            VersionInfo = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            DeviceDataVersionInfo = input.ReadString();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CheckinResponse message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Intent : pb::IMessage<Intent>
            {
                private static readonly pb::MessageParser<Intent> _parser = new pb::MessageParser<Intent>(() => new Intent());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Intent> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Google.Protobuf.checkin.CheckinResponse.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Intent()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Intent(Intent other) : this()
                {
                    action_ = other.action_;
                    dataUri_ = other.dataUri_;
                    mimeType_ = other.mimeType_;
                    javaClass_ = other.javaClass_;
                    extra_ = other.extra_.Clone();
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Intent Clone()
                {
                    return new Intent(this);
                }

                /// <summary>Field number for the "action" field.</summary>
                public const int ActionFieldNumber = 1;
                private readonly static string ActionDefaultValue = "";

                private string action_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Action
                {
                    get { return action_ ?? ActionDefaultValue; }
                    set
                    {
                        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "action" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasAction
                {
                    get { return action_ != null; }
                }
                /// <summary>Clears the value of the "action" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearAction()
                {
                    action_ = null;
                }

                /// <summary>Field number for the "dataUri" field.</summary>
                public const int DataUriFieldNumber = 2;
                private readonly static string DataUriDefaultValue = "";

                private string dataUri_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string DataUri
                {
                    get { return dataUri_ ?? DataUriDefaultValue; }
                    set
                    {
                        dataUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "dataUri" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasDataUri
                {
                    get { return dataUri_ != null; }
                }
                /// <summary>Clears the value of the "dataUri" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearDataUri()
                {
                    dataUri_ = null;
                }

                /// <summary>Field number for the "mimeType" field.</summary>
                public const int MimeTypeFieldNumber = 3;
                private readonly static string MimeTypeDefaultValue = "";

                private string mimeType_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string MimeType
                {
                    get { return mimeType_ ?? MimeTypeDefaultValue; }
                    set
                    {
                        mimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "mimeType" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasMimeType
                {
                    get { return mimeType_ != null; }
                }
                /// <summary>Clears the value of the "mimeType" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearMimeType()
                {
                    mimeType_ = null;
                }

                /// <summary>Field number for the "javaClass" field.</summary>
                public const int JavaClassFieldNumber = 4;
                private readonly static string JavaClassDefaultValue = "";

                private string javaClass_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string JavaClass
                {
                    get { return javaClass_ ?? JavaClassDefaultValue; }
                    set
                    {
                        javaClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "javaClass" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasJavaClass
                {
                    get { return javaClass_ != null; }
                }
                /// <summary>Clears the value of the "javaClass" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearJavaClass()
                {
                    javaClass_ = null;
                }

                /// <summary>Field number for the "extra" field.</summary>
                public const int ExtraFieldNumber = 5;
                private static readonly pb::FieldCodec<global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Types.Extra> _repeated_extra_codec
                    = pb::FieldCodec.ForMessage(42, global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Types.Extra.Parser);
                private readonly pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Types.Extra> extra_ = new pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Types.Extra>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Types.Extra> Extra
                {
                    get { return extra_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Intent);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Intent other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Action != other.Action) return false;
                    if (DataUri != other.DataUri) return false;
                    if (MimeType != other.MimeType) return false;
                    if (JavaClass != other.JavaClass) return false;
                    if (!extra_.Equals(other.extra_)) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HasAction) hash ^= Action.GetHashCode();
                    if (HasDataUri) hash ^= DataUri.GetHashCode();
                    if (HasMimeType) hash ^= MimeType.GetHashCode();
                    if (HasJavaClass) hash ^= JavaClass.GetHashCode();
                    hash ^= extra_.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HasAction)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Action);
                    }
                    if (HasDataUri)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(DataUri);
                    }
                    if (HasMimeType)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(MimeType);
                    }
                    if (HasJavaClass)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(JavaClass);
                    }
                    extra_.WriteTo(output, _repeated_extra_codec);
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HasAction)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
                    }
                    if (HasDataUri)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataUri);
                    }
                    if (HasMimeType)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(MimeType);
                    }
                    if (HasJavaClass)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(JavaClass);
                    }
                    size += extra_.CalculateSize(_repeated_extra_codec);
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Intent other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HasAction)
                    {
                        Action = other.Action;
                    }
                    if (other.HasDataUri)
                    {
                        DataUri = other.DataUri;
                    }
                    if (other.HasMimeType)
                    {
                        MimeType = other.MimeType;
                    }
                    if (other.HasJavaClass)
                    {
                        JavaClass = other.JavaClass;
                    }
                    extra_.Add(other.extra_);
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    Action = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    DataUri = input.ReadString();
                                    break;
                                }
                            case 26:
                                {
                                    MimeType = input.ReadString();
                                    break;
                                }
                            case 34:
                                {
                                    JavaClass = input.ReadString();
                                    break;
                                }
                            case 42:
                                {
                                    extra_.AddEntriesFrom(input, _repeated_extra_codec);
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the Intent message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public sealed partial class Extra : pb::IMessage<Extra>
                    {
                        private static readonly pb::MessageParser<Extra> _parser = new pb::MessageParser<Extra>(() => new Extra());
                        private pb::UnknownFieldSet _unknownFields;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<Extra> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::Google.Protobuf.checkin.CheckinResponse.Types.Intent.Descriptor.NestedTypes[0]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Extra()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Extra(Extra other) : this()
                        {
                            name_ = other.name_;
                            value_ = other.value_;
                            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public Extra Clone()
                        {
                            return new Extra(this);
                        }

                        /// <summary>Field number for the "name" field.</summary>
                        public const int NameFieldNumber = 6;
                        private readonly static string NameDefaultValue = "";

                        private string name_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Name
                        {
                            get { return name_ ?? NameDefaultValue; }
                            set
                            {
                                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "name" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasName
                        {
                            get { return name_ != null; }
                        }
                        /// <summary>Clears the value of the "name" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearName()
                        {
                            name_ = null;
                        }

                        /// <summary>Field number for the "value" field.</summary>
                        public const int ValueFieldNumber = 7;
                        private readonly static string ValueDefaultValue = "";

                        private string value_;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public string Value
                        {
                            get { return value_ ?? ValueDefaultValue; }
                            set
                            {
                                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                            }
                        }
                        /// <summary>Gets whether the "value" field is set</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool HasValue
                        {
                            get { return value_ != null; }
                        }
                        /// <summary>Clears the value of the "value" field</summary>
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearValue()
                        {
                            value_ = null;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as Extra);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(Extra other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Name != other.Name) return false;
                            if (Value != other.Value) return false;
                            return Equals(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (HasName) hash ^= Name.GetHashCode();
                            if (HasValue) hash ^= Value.GetHashCode();
                            if (_unknownFields != null)
                            {
                                hash ^= _unknownFields.GetHashCode();
                            }
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (HasName)
                            {
                                output.WriteRawTag(50);
                                output.WriteString(Name);
                            }
                            if (HasValue)
                            {
                                output.WriteRawTag(58);
                                output.WriteString(Value);
                            }
                            if (_unknownFields != null)
                            {
                                _unknownFields.WriteTo(output);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (HasName)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                            }
                            if (HasValue)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
                            }
                            if (_unknownFields != null)
                            {
                                size += _unknownFields.CalculateSize();
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(Extra other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            if (other.HasName)
                            {
                                Name = other.Name;
                            }
                            if (other.HasValue)
                            {
                                Value = other.Value;
                            }
                            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                        break;
                                    case 50:
                                        {
                                            Name = input.ReadString();
                                            break;
                                        }
                                    case 58:
                                        {
                                            Value = input.ReadString();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                }
                #endregion

            }

            public sealed partial class GservicesSetting : pb::IMessage<GservicesSetting>
            {
                private static readonly pb::MessageParser<GservicesSetting> _parser = new pb::MessageParser<GservicesSetting>(() => new GservicesSetting());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<GservicesSetting> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Google.Protobuf.checkin.CheckinResponse.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public GservicesSetting()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public GservicesSetting(GservicesSetting other) : this()
                {
                    name_ = other.name_;
                    value_ = other.value_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public GservicesSetting Clone()
                {
                    return new GservicesSetting(this);
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;
                private readonly static pb::ByteString NameDefaultValue = pb::ByteString.Empty;

                private pb::ByteString name_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString Name
                {
                    get { return name_ ?? NameDefaultValue; }
                    set
                    {
                        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "name" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasName
                {
                    get { return name_ != null; }
                }
                /// <summary>Clears the value of the "name" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearName()
                {
                    name_ = null;
                }

                /// <summary>Field number for the "value" field.</summary>
                public const int ValueFieldNumber = 2;
                private readonly static pb::ByteString ValueDefaultValue = pb::ByteString.Empty;

                private pb::ByteString value_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString Value
                {
                    get { return value_ ?? ValueDefaultValue; }
                    set
                    {
                        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }
                /// <summary>Gets whether the "value" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasValue
                {
                    get { return value_ != null; }
                }
                /// <summary>Clears the value of the "value" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearValue()
                {
                    value_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as GservicesSetting);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(GservicesSetting other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Name != other.Name) return false;
                    if (Value != other.Value) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HasName) hash ^= Name.GetHashCode();
                    if (HasValue) hash ^= Value.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HasName)
                    {
                        output.WriteRawTag(10);
                        output.WriteBytes(Name);
                    }
                    if (HasValue)
                    {
                        output.WriteRawTag(18);
                        output.WriteBytes(Value);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HasName)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
                    }
                    if (HasValue)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(GservicesSetting other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HasName)
                    {
                        Name = other.Name;
                    }
                    if (other.HasValue)
                    {
                        Value = other.Value;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 10:
                                {
                                    Name = input.ReadBytes();
                                    break;
                                }
                            case 18:
                                {
                                    Value = input.ReadBytes();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    #endregion

}

#endregion Designer generated code
